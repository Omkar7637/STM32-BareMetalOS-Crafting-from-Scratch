
Round_robin_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001700  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080018d0  080018d0  000028d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001978  08001978  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001978  08001978  00002978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001980  08001980  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001980  08001980  00002980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001984  08001984  00002984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001988  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  2000005c  080019e4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  080019e4  000034b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019e0  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000823  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00005290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000171  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abcf  00000000  00000000  00005619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002488  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091094  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e24  00000000  00000000  000b3748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080018b8 	.word	0x080018b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080018b8 	.word	0x080018b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <led_init>:

#define GPIOAEN			(1U<<0)//  0b 0000 0000 0000 0000 0000 0000 0000 0001
#define LED_PIN			(1U<<5)

void led_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	//Example of 'friendly' programming
	// Initial state =    0b 0000 0000 0000 0000 1100 0000 0000 0000
	//Set bit0 = (1u<<0)= 0b 0000 0000 0000 0000 0000 0000 0000 0001
	//final state =  Initial state OR Set bit0  =  0b 0000 0000 0000 0000 1100 0000 0000 0001

	RCC->AHB1ENR  |= GPIOAEN;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <led_init+0x34>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <led_init+0x34>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30




	/*Set led pin as output pin*/
	GPIOA->MODER |=(1U<<10);
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <led_init+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <led_init+0x38>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <led_init+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <led_init+0x38>)
 80002d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002d6:	6013      	str	r3, [r2, #0]

}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000

080002ec <led_on>:


void led_on(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	/*Set led pin HIGH (PA5)*/
	GPIOA->ODR |= LED_PIN;
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <led_on+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <led_on+0x1c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40020000 	.word	0x40020000

0800030c <led_off>:


void led_off(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	/*Set led pin LOW (PA5)*/
	GPIOA->ODR &= ~LED_PIN;
 8000310:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <led_off+0x1c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <led_off+0x1c>)
 8000316:	f023 0320 	bic.w	r3, r3, #32
 800031a:	6153      	str	r3, [r2, #20]

}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40020000 	.word	0x40020000

0800032c <task0>:
void valve_open(void);
void valve_close(void);


void task0(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <task0+0x2c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	4a07      	ldr	r2, [pc, #28]	@ (8000358 <task0+0x2c>)
 800033a:	6013      	str	r3, [r2, #0]
		printf("Uart is working\n\r");
 800033c:	4807      	ldr	r0, [pc, #28]	@ (800035c <task0+0x30>)
 800033e:	f000 fc4d 	bl	8000bdc <iprintf>
		for(int i = 0; i<90000; i++){}
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	e002      	b.n	800034e <task0+0x22>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a03      	ldr	r2, [pc, #12]	@ (8000360 <task0+0x34>)
 8000352:	4293      	cmp	r3, r2
 8000354:	ddf8      	ble.n	8000348 <task0+0x1c>
		Task0_Profiler++;
 8000356:	e7ec      	b.n	8000332 <task0+0x6>
 8000358:	20000078 	.word	0x20000078
 800035c:	080018d0 	.word	0x080018d0
 8000360:	00015f8f 	.word	0x00015f8f

08000364 <task1>:
	}
}


void task1(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <task1+0x48>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <task1+0x48>)
 8000372:	6013      	str	r3, [r2, #0]
		led_init();
 8000374:	f7ff ff9c 	bl	80002b0 <led_init>
		led_on();
 8000378:	f7ff ffb8 	bl	80002ec <led_on>
		for(int i = 0; i<90000; i++){}
 800037c:	2300      	movs	r3, #0
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	e002      	b.n	8000388 <task1+0x24>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3301      	adds	r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <task1+0x4c>)
 800038c:	4293      	cmp	r3, r2
 800038e:	ddf8      	ble.n	8000382 <task1+0x1e>
		led_off();
 8000390:	f7ff ffbc 	bl	800030c <led_off>
		for(int i = 0; i<90000; i++){}
 8000394:	2300      	movs	r3, #0
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	e002      	b.n	80003a0 <task1+0x3c>
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	4a03      	ldr	r2, [pc, #12]	@ (80003b0 <task1+0x4c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	ddf8      	ble.n	800039a <task1+0x36>
		Task1_Profiler++;
 80003a8:	e7df      	b.n	800036a <task1+0x6>
 80003aa:	bf00      	nop
 80003ac:	2000007c 	.word	0x2000007c
 80003b0:	00015f8f 	.word	0x00015f8f

080003b4 <task2>:
		//valve_open();
	}
}

void task2(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <task2+0x28>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	4a06      	ldr	r2, [pc, #24]	@ (80003dc <task2+0x28>)
 80003c2:	6013      	str	r3, [r2, #0]
		for(int i = 0; i<90000; i++){}
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	e002      	b.n	80003d0 <task2+0x1c>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3301      	adds	r3, #1
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a03      	ldr	r2, [pc, #12]	@ (80003e0 <task2+0x2c>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	ddf8      	ble.n	80003ca <task2+0x16>
		Task2_Profiler++;
 80003d8:	e7ef      	b.n	80003ba <task2+0x6>
 80003da:	bf00      	nop
 80003dc:	20000080 	.word	0x20000080
 80003e0:	00015f8f 	.word	0x00015f8f

080003e4 <main>:
	}
}

int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0


	uart_tx_init();
 80003e8:	f000 fa5e 	bl	80008a8 <uart_tx_init>
	led_init();
 80003ec:	f7ff ff60 	bl	80002b0 <led_init>

	/*Initialize Kernel*/
	osKernelInit();
 80003f0:	f000 f948 	bl	8000684 <osKernelInit>
	/*Add Threads*/
	osKernelAddThreads(&task0,&task1,&task2);
 80003f4:	4a05      	ldr	r2, [pc, #20]	@ (800040c <main+0x28>)
 80003f6:	4906      	ldr	r1, [pc, #24]	@ (8000410 <main+0x2c>)
 80003f8:	4806      	ldr	r0, [pc, #24]	@ (8000414 <main+0x30>)
 80003fa:	f000 f907 	bl	800060c <osKernelAddThreads>

	/*Set RoundRobin time quanta*/
	osKernelLaunch(QUANTA);
 80003fe:	200a      	movs	r0, #10
 8000400:	f000 f94e 	bl	80006a0 <osKernelLaunch>
 8000404:	2300      	movs	r3, #0


}
 8000406:	4618      	mov	r0, r3
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	080003b5 	.word	0x080003b5
 8000410:	08000365 	.word	0x08000365
 8000414:	0800032d 	.word	0x0800032d

08000418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	db0a      	blt.n	8000442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	490c      	ldr	r1, [pc, #48]	@ (8000464 <__NVIC_SetPriority+0x4c>)
 8000432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000436:	0112      	lsls	r2, r2, #4
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	440b      	add	r3, r1
 800043c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000440:	e00a      	b.n	8000458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4908      	ldr	r1, [pc, #32]	@ (8000468 <__NVIC_SetPriority+0x50>)
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	f003 030f 	and.w	r3, r3, #15
 800044e:	3b04      	subs	r3, #4
 8000450:	0112      	lsls	r2, r2, #4
 8000452:	b2d2      	uxtb	r2, r2
 8000454:	440b      	add	r3, r1
 8000456:	761a      	strb	r2, [r3, #24]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000e100 	.word	0xe000e100
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <osKernelStackInit>:
/*Each thread will have stacksize of 100 i.e. 400bytes*/
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; /*Stack Pointer*/
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800047a:	fb02 f303 	mul.w	r3, r2, r3
 800047e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000482:	4a60      	ldr	r2, [pc, #384]	@ (8000604 <osKernelStackInit+0x198>)
 8000484:	441a      	add	r2, r3
 8000486:	4960      	ldr	r1, [pc, #384]	@ (8000608 <osKernelStackInit+0x19c>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	/*Set bit21 (T-bit) in PSR to 1, to operate in
	 * Thumb mode*/
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24); /*PSR*/
 800048e:	4a5d      	ldr	r2, [pc, #372]	@ (8000604 <osKernelStackInit+0x198>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000496:	fb01 f303 	mul.w	r3, r1, r3
 800049a:	4413      	add	r3, r2
 800049c:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 80004a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80004a4:	601a      	str	r2, [r3, #0]


  /**@Note : Block below is optional, for debugging purpose only*/
  /**Dummy stack content*/
	TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    /*R14 i.e LR*/
 80004a6:	4a57      	ldr	r2, [pc, #348]	@ (8000604 <osKernelStackInit+0x198>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004ae:	fb01 f303 	mul.w	r3, r1, r3
 80004b2:	4413      	add	r3, r2
 80004b4:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80004b8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004bc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    /*R12*/
 80004be:	4a51      	ldr	r2, [pc, #324]	@ (8000604 <osKernelStackInit+0x198>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004c6:	fb01 f303 	mul.w	r3, r1, r3
 80004ca:	4413      	add	r3, r2
 80004cc:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80004d0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004d4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    /*R3*/
 80004d6:	4a4b      	ldr	r2, [pc, #300]	@ (8000604 <osKernelStackInit+0x198>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004de:	fb01 f303 	mul.w	r3, r1, r3
 80004e2:	4413      	add	r3, r2
 80004e4:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80004e8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004ec:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    /*R2*/
 80004ee:	4a45      	ldr	r2, [pc, #276]	@ (8000604 <osKernelStackInit+0x198>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004f6:	fb01 f303 	mul.w	r3, r1, r3
 80004fa:	4413      	add	r3, r2
 80004fc:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8000500:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000504:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    /*R1*/
 8000506:	4a3f      	ldr	r2, [pc, #252]	@ (8000604 <osKernelStackInit+0x198>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800050e:	fb01 f303 	mul.w	r3, r1, r3
 8000512:	4413      	add	r3, r2
 8000514:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000518:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800051c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    /*R0*/
 800051e:	4a39      	ldr	r2, [pc, #228]	@ (8000604 <osKernelStackInit+0x198>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	4413      	add	r3, r2
 800052c:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8000530:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000534:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    /*R11*/
 8000536:	4a33      	ldr	r2, [pc, #204]	@ (8000604 <osKernelStackInit+0x198>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800053e:	fb01 f303 	mul.w	r3, r1, r3
 8000542:	4413      	add	r3, r2
 8000544:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000548:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800054c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   /*R10*/
 800054e:	4a2d      	ldr	r2, [pc, #180]	@ (8000604 <osKernelStackInit+0x198>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000556:	fb01 f303 	mul.w	r3, r1, r3
 800055a:	4413      	add	r3, r2
 800055c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8000560:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000564:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   /*R9*/
 8000566:	4a27      	ldr	r2, [pc, #156]	@ (8000604 <osKernelStackInit+0x198>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800056e:	fb01 f303 	mul.w	r3, r1, r3
 8000572:	4413      	add	r3, r2
 8000574:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000578:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800057c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   /*R8*/
 800057e:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <osKernelStackInit+0x198>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000586:	fb01 f303 	mul.w	r3, r1, r3
 800058a:	4413      	add	r3, r2
 800058c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8000590:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000594:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   /*R7*/
 8000596:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <osKernelStackInit+0x198>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800059e:	fb01 f303 	mul.w	r3, r1, r3
 80005a2:	4413      	add	r3, r2
 80005a4:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 80005a8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005ac:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   /*R6*/
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <osKernelStackInit+0x198>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80005b6:	fb01 f303 	mul.w	r3, r1, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80005c0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005c4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   /*R5*/
 80005c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000604 <osKernelStackInit+0x198>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80005ce:	fb01 f303 	mul.w	r3, r1, r3
 80005d2:	4413      	add	r3, r2
 80005d4:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 80005d8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005dc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   /*R4*/
 80005de:	4a09      	ldr	r2, [pc, #36]	@ (8000604 <osKernelStackInit+0x198>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	4413      	add	r3, r2
 80005ec:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80005f0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200000a4 	.word	0x200000a4
 8000608:	20000088 	.word	0x20000088

0800060c <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();
	tcbs[0].nextPt =  &tcbs[1];
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <osKernelAddThreads+0x64>)
 800061e:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <osKernelAddThreads+0x68>)
 8000620:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt =  &tcbs[2];
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <osKernelAddThreads+0x64>)
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <osKernelAddThreads+0x6c>)
 8000626:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt =  &tcbs[0];
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <osKernelAddThreads+0x64>)
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <osKernelAddThreads+0x64>)
 800062c:	615a      	str	r2, [r3, #20]

	/*Initial stack for thread0*/
	osKernelStackInit(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff1c 	bl	800046c <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[0][STACKSIZE - 2] =  (int32_t)(task0);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4a11      	ldr	r2, [pc, #68]	@ (800067c <osKernelAddThreads+0x70>)
 8000638:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	/*Initial stack for thread1*/
	osKernelStackInit(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff15 	bl	800046c <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[1][STACKSIZE - 2] =  (int32_t)(task1);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <osKernelAddThreads+0x70>)
 8000646:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78


	/*Initial stack for thread2*/
	osKernelStackInit(2);
 800064a:	2002      	movs	r0, #2
 800064c:	f7ff ff0e 	bl	800046c <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[2][STACKSIZE - 2] =  (int32_t)(task2);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <osKernelAddThreads+0x70>)
 8000654:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000658:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	/*Start from thread0*/
	currentPt  = &tcbs[0];
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <osKernelAddThreads+0x74>)
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <osKernelAddThreads+0x64>)
 8000660:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000662:	b662      	cpsie	i
}
 8000664:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000088 	.word	0x20000088
 8000674:	20000090 	.word	0x20000090
 8000678:	20000098 	.word	0x20000098
 800067c:	200000a4 	.word	0x200000a4
 8000680:	200000a0 	.word	0x200000a0

08000684 <osKernelInit>:


void osKernelInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER  = (BUS_FREQ/1000);
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <osKernelInit+0x18>)
 800068a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084

080006a0 <osKernelLaunch>:


void osKernelLaunch(uint32_t quanta)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	/*Reset systick*/
	SysTick->CTRL = SYSTICK_RST;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <osKernelLaunch+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <osKernelLaunch+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]

	/*Load quanta*/
	SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <osKernelLaunch+0x50>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <osKernelLaunch+0x4c>)
 80006c0:	3b01      	subs	r3, #1
 80006c2:	6053      	str	r3, [r2, #4]

	/*Set systick to low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
 80006c4:	210f      	movs	r1, #15
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006ca:	f7ff fea5 	bl	8000418 <__NVIC_SetPriority>

	/*Enable systick, select internal clock*/
	SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <osKernelLaunch+0x4c>)
 80006d0:	2205      	movs	r2, #5
 80006d2:	601a      	str	r2, [r3, #0]

	/*Enable systick interrupt*/
	SysTick->CTRL  |= CTRL_TICKINT;
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <osKernelLaunch+0x4c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <osKernelLaunch+0x4c>)
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	6013      	str	r3, [r2, #0]

	/*Launch scheduler*/
	osSchedulerLaunch();
 80006e0:	f000 f81a 	bl	8000718 <osSchedulerLaunch>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	e000e010 	.word	0xe000e010
 80006f0:	20000084 	.word	0x20000084

080006f4 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*SUSPEND CURRENT THREAD*/

	/*Disable global interrupts*/
	__asm("CPSID	I");
 80006f4:	b672      	cpsid	i

	/*Save r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("PUSH  {R4-R11}");
 80006f6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Load address of currentPt into r0*/
	__asm("LDR R0, =currentPt");
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <SysTick_Handler+0x20>)

	/*Load r1 from address equals r0, i.e. r1 =currentPt*/
	__asm("LDR R1,[R0]");
 80006fc:	6801      	ldr	r1, [r0, #0]

	/*Store Cortex-M SP at address equals r1, i.e Save SP into tcb */
	__asm("STR SP,[R1]");
 80006fe:	f8c1 d000 	str.w	sp, [r1]

    /*CHOOSE NEXT THREAD*/

    /*Load r1 from a location 4bytes above address r1, i.e r1 = currentPt->next*/
	__asm("LDR R1,[R1,#4]");
 8000702:	6849      	ldr	r1, [r1, #4]

	/*Store r1 at address equals r0, i.e currentPt =  r1*/
	__asm("STR	R1,[R0]");
 8000704:	6001      	str	r1, [r0, #0]

	/*Load Cortex-M SP from address equals r1, i.e SP =  currentPt->stackPt*/
	__asm("LDR SP,[R1]");
 8000706:	f8d1 d000 	ldr.w	sp, [r1]

	/*Restore r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("POP {R4-R11}");
 800070a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 800070e:	b662      	cpsie	i

	/*Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr */
	__asm("BX	LR");
 8000710:	4770      	bx	lr



}
 8000712:	bf00      	nop
 8000714:	200000a0 	.word	0x200000a0

08000718 <osSchedulerLaunch>:


void osSchedulerLaunch(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	/*Load address of currentPt into R0*/
	__asm("LDR R0,=currentPt");
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <osSchedulerLaunch+0x2c>)

	/*Load r2 from address equals r0,i.e r2 =currentPt*/
	__asm("LDR R2,[r0]");
 800071e:	6802      	ldr	r2, [r0, #0]

	/*Load Cortex-M SP from address equals R2,i.e. SP = currentPt->stackPt*/
	__asm("LDR  SP,[R2]");
 8000720:	f8d2 d000 	ldr.w	sp, [r2]

	/*Restore r4,r5,r6,r7,r8,r9,r10,r11*/
	__asm("POP {R4-R11}");
 8000724:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Restore r12*/
	__asm("POP {R12}");
 8000728:	f85d cb04 	ldr.w	ip, [sp], #4

	/*Restore r0,r1,r2,r3*/
	__asm("POP	{R0-R3}");
 800072c:	bc0f      	pop	{r0, r1, r2, r3}

	/*Skip LR */
	__asm("ADD  SP,SP,#4");
 800072e:	b001      	add	sp, #4

	/*Create a new start location by popping LR*/
	__asm("POP {LR}");
 8000730:	f85d eb04 	ldr.w	lr, [sp], #4

	/*Skip PSR by adding 4 to SP*/
	__asm("ADD  SP,SP,#4");
 8000734:	b001      	add	sp, #4

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 8000736:	b662      	cpsie	i

	/*Return from exception*/
	__asm("BX	LR");
 8000738:	4770      	bx	lr
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000a0 	.word	0x200000a0

08000748 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e00a      	b.n	8000770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800075a:	f3af 8000 	nop.w
 800075e:	4601      	mov	r1, r0
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	60ba      	str	r2, [r7, #8]
 8000766:	b2ca      	uxtb	r2, r1
 8000768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	dbf0      	blt.n	800075a <_read+0x12>
	}

return len;
 8000778:	687b      	ldr	r3, [r7, #4]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	e009      	b.n	80007a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	60ba      	str	r2, [r7, #8]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f877 	bl	8000890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbf1      	blt.n	8000794 <_write+0x12>
	}
	return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_close>:

int _close(int file)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	return -1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e2:	605a      	str	r2, [r3, #4]
	return 0;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <_isatty>:

int _isatty(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	return 1;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	return 0;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800082c:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <_sbrk+0x5c>)
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <_sbrk+0x60>)
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <_sbrk+0x64>)
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <_sbrk+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	429a      	cmp	r2, r3
 8000852:	d207      	bcs.n	8000864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000854:	f000 fa66 	bl	8000d24 <__errno>
 8000858:	4603      	mov	r3, r0
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000862:	e009      	b.n	8000878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <_sbrk+0x64>)
 8000874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20020000 	.word	0x20020000
 8000884:	00000400 	.word	0x00000400
 8000888:	20001364 	.word	0x20001364
 800088c:	200014b8 	.word	0x200014b8

08000890 <__io_putchar>:
static void uart_write(int ch);
static void uart_set_baudrate1(uint32_t periph_clk, uint32_t baudrate);


int __io_putchar(int ch)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f873 	bl	8000984 <uart_write>
	return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <uart_tx_init>:

void uart_tx_init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	 RCC->AHB1ENR  |= GPIOAEN;
 80008ac:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <uart_tx_init+0xc8>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000970 <uart_tx_init+0xc8>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	@ 0x30
	 RCC->APB2ENR |= GPIOAEN;
 80008b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <uart_tx_init+0xc8>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000970 <uart_tx_init+0xc8>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set PA2 mode to alternate function mode*/
	 GPIOA->MODER &=~(1U<<4);
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <uart_tx_init+0xcc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000974 <uart_tx_init+0xcc>)
 80008ca:	f023 0310 	bic.w	r3, r3, #16
 80008ce:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=(1U<<5);
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <uart_tx_init+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <uart_tx_init+0xcc>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	6013      	str	r3, [r2, #0]

	/*Set PA9 mode to alternate function mode*/
	 GPIOA->MODER &=~(1U<<18);
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <uart_tx_init+0xcc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a24      	ldr	r2, [pc, #144]	@ (8000974 <uart_tx_init+0xcc>)
 80008e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008e6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=(1U<<19);
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <uart_tx_init+0xcc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a21      	ldr	r2, [pc, #132]	@ (8000974 <uart_tx_init+0xcc>)
 80008ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008f2:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7 (UART2_TX)*/
	 GPIOA->AFR[0] |=(1U<<8);
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <uart_tx_init+0xcc>)
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <uart_tx_init+0xcc>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008fe:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<9);
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <uart_tx_init+0xcc>)
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <uart_tx_init+0xcc>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800090a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<10);
 800090c:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <uart_tx_init+0xcc>)
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <uart_tx_init+0xcc>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000916:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(1U<<11);
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <uart_tx_init+0xcc>)
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <uart_tx_init+0xcc>)
 800091e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000922:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART*/
	 RCC->APB1ENR |= UART2EN;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <uart_tx_init+0xc8>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <uart_tx_init+0xc8>)
 800092a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
	 RCC->APB2ENR |= UART1EN;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <uart_tx_init+0xc8>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000934:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <uart_tx_init+0xc8>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Configure baudrate*/
	 uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 800093c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <uart_tx_init+0xd0>)
 8000942:	f000 f837 	bl	80009b4 <uart_set_baudrate>

	/*Configure transfer direction*/
	 USART2->CR1 = CR1_TE;
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <uart_tx_init+0xd4>)
 8000948:	2208      	movs	r2, #8
 800094a:	60da      	str	r2, [r3, #12]
	 USART1->CR1 = CR1_TE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <uart_tx_init+0xd8>)
 800094e:	2208      	movs	r2, #8
 8000950:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	 USART2->CR1 |= CR1_UE;
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <uart_tx_init+0xd4>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	4a09      	ldr	r2, [pc, #36]	@ (800097c <uart_tx_init+0xd4>)
 8000958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800095c:	60d3      	str	r3, [r2, #12]
	 USART1->CR1 |= CR1_UE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <uart_tx_init+0xd8>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <uart_tx_init+0xd8>)
 8000964:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000968:	60d3      	str	r3, [r2, #12]
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000
 8000978:	00f42400 	.word	0x00f42400
 800097c:	40004400 	.word	0x40004400
 8000980:	40011000 	.word	0x40011000

08000984 <uart_write>:

static void uart_write(int ch)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	 while(!(USART2->SR & SR_TXE)){}
 800098c:	bf00      	nop
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <uart_write+0x2c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f9      	beq.n	800098e <uart_write+0xa>

	/*Write to transmit data register*/
	 USART2->DR =  (ch & 0XFF);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <uart_write+0x2c>)
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	6053      	str	r3, [r2, #4]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40004400 	.word	0x40004400

080009b4 <uart_set_baudrate>:
	 USART1->DR =  (ch & 0XFF);
}


static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80009be:	6839      	ldr	r1, [r7, #0]
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f80b 	bl	80009dc <compute_uart_bd>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <uart_set_baudrate+0x24>)
 80009cc:	609a      	str	r2, [r3, #8]
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40004400 	.word	0x40004400

080009dc <compute_uart_bd>:
{
	USART1->BRR = compute_uart_bd(periph_clk,baudrate);
}

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	085a      	lsrs	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	441a      	add	r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a32:	f000 f97d 	bl	8000d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff fcd5 	bl	80003e4 <main>

08000a3a <LoopForever>:

LoopForever:
  b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   r0, =_estack
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a48:	08001988 	.word	0x08001988
  ldr r2, =_sbss
 8000a4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a50:	200014b4 	.word	0x200014b4

08000a54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <std>:
 8000a58:	2300      	movs	r3, #0
 8000a5a:	b510      	push	{r4, lr}
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a66:	6083      	str	r3, [r0, #8]
 8000a68:	8181      	strh	r1, [r0, #12]
 8000a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000a6c:	81c2      	strh	r2, [r0, #14]
 8000a6e:	6183      	str	r3, [r0, #24]
 8000a70:	4619      	mov	r1, r3
 8000a72:	2208      	movs	r2, #8
 8000a74:	305c      	adds	r0, #92	@ 0x5c
 8000a76:	f000 f906 	bl	8000c86 <memset>
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <std+0x58>)
 8000a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <std+0x5c>)
 8000a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <std+0x60>)
 8000a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <std+0x64>)
 8000a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <std+0x68>)
 8000a8c:	6224      	str	r4, [r4, #32]
 8000a8e:	429c      	cmp	r4, r3
 8000a90:	d006      	beq.n	8000aa0 <std+0x48>
 8000a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a96:	4294      	cmp	r4, r2
 8000a98:	d002      	beq.n	8000aa0 <std+0x48>
 8000a9a:	33d0      	adds	r3, #208	@ 0xd0
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	d105      	bne.n	8000aac <std+0x54>
 8000aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa8:	f000 b966 	b.w	8000d78 <__retarget_lock_init_recursive>
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	08000c01 	.word	0x08000c01
 8000ab4:	08000c23 	.word	0x08000c23
 8000ab8:	08000c5b 	.word	0x08000c5b
 8000abc:	08000c7f 	.word	0x08000c7f
 8000ac0:	20001368 	.word	0x20001368

08000ac4 <stdio_exit_handler>:
 8000ac4:	4a02      	ldr	r2, [pc, #8]	@ (8000ad0 <stdio_exit_handler+0xc>)
 8000ac6:	4903      	ldr	r1, [pc, #12]	@ (8000ad4 <stdio_exit_handler+0x10>)
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <stdio_exit_handler+0x14>)
 8000aca:	f000 b869 	b.w	8000ba0 <_fwalk_sglue>
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08001619 	.word	0x08001619
 8000ad8:	20000010 	.word	0x20000010

08000adc <cleanup_stdio>:
 8000adc:	6841      	ldr	r1, [r0, #4]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <cleanup_stdio+0x34>)
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	b510      	push	{r4, lr}
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	d001      	beq.n	8000aec <cleanup_stdio+0x10>
 8000ae8:	f000 fd96 	bl	8001618 <_fflush_r>
 8000aec:	68a1      	ldr	r1, [r4, #8]
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <cleanup_stdio+0x38>)
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d002      	beq.n	8000afa <cleanup_stdio+0x1e>
 8000af4:	4620      	mov	r0, r4
 8000af6:	f000 fd8f 	bl	8001618 <_fflush_r>
 8000afa:	68e1      	ldr	r1, [r4, #12]
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <cleanup_stdio+0x3c>)
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d004      	beq.n	8000b0c <cleanup_stdio+0x30>
 8000b02:	4620      	mov	r0, r4
 8000b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b08:	f000 bd86 	b.w	8001618 <_fflush_r>
 8000b0c:	bd10      	pop	{r4, pc}
 8000b0e:	bf00      	nop
 8000b10:	20001368 	.word	0x20001368
 8000b14:	200013d0 	.word	0x200013d0
 8000b18:	20001438 	.word	0x20001438

08000b1c <global_stdio_init.part.0>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <global_stdio_init.part.0+0x30>)
 8000b20:	4c0b      	ldr	r4, [pc, #44]	@ (8000b50 <global_stdio_init.part.0+0x34>)
 8000b22:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <global_stdio_init.part.0+0x38>)
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	4620      	mov	r0, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	f7ff ff94 	bl	8000a58 <std>
 8000b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000b34:	2201      	movs	r2, #1
 8000b36:	2109      	movs	r1, #9
 8000b38:	f7ff ff8e 	bl	8000a58 <std>
 8000b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000b40:	2202      	movs	r2, #2
 8000b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b46:	2112      	movs	r1, #18
 8000b48:	f7ff bf86 	b.w	8000a58 <std>
 8000b4c:	200014a0 	.word	0x200014a0
 8000b50:	20001368 	.word	0x20001368
 8000b54:	08000ac5 	.word	0x08000ac5

08000b58 <__sfp_lock_acquire>:
 8000b58:	4801      	ldr	r0, [pc, #4]	@ (8000b60 <__sfp_lock_acquire+0x8>)
 8000b5a:	f000 b90e 	b.w	8000d7a <__retarget_lock_acquire_recursive>
 8000b5e:	bf00      	nop
 8000b60:	200014a9 	.word	0x200014a9

08000b64 <__sfp_lock_release>:
 8000b64:	4801      	ldr	r0, [pc, #4]	@ (8000b6c <__sfp_lock_release+0x8>)
 8000b66:	f000 b909 	b.w	8000d7c <__retarget_lock_release_recursive>
 8000b6a:	bf00      	nop
 8000b6c:	200014a9 	.word	0x200014a9

08000b70 <__sinit>:
 8000b70:	b510      	push	{r4, lr}
 8000b72:	4604      	mov	r4, r0
 8000b74:	f7ff fff0 	bl	8000b58 <__sfp_lock_acquire>
 8000b78:	6a23      	ldr	r3, [r4, #32]
 8000b7a:	b11b      	cbz	r3, 8000b84 <__sinit+0x14>
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b80:	f7ff bff0 	b.w	8000b64 <__sfp_lock_release>
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__sinit+0x28>)
 8000b86:	6223      	str	r3, [r4, #32]
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <__sinit+0x2c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f5      	bne.n	8000b7c <__sinit+0xc>
 8000b90:	f7ff ffc4 	bl	8000b1c <global_stdio_init.part.0>
 8000b94:	e7f2      	b.n	8000b7c <__sinit+0xc>
 8000b96:	bf00      	nop
 8000b98:	08000add 	.word	0x08000add
 8000b9c:	200014a0 	.word	0x200014a0

08000ba0 <_fwalk_sglue>:
 8000ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	4614      	mov	r4, r2
 8000baa:	2600      	movs	r6, #0
 8000bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8000bb4:	d505      	bpl.n	8000bc2 <_fwalk_sglue+0x22>
 8000bb6:	6824      	ldr	r4, [r4, #0]
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d1f7      	bne.n	8000bac <_fwalk_sglue+0xc>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bc2:	89ab      	ldrh	r3, [r5, #12]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d907      	bls.n	8000bd8 <_fwalk_sglue+0x38>
 8000bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	d003      	beq.n	8000bd8 <_fwalk_sglue+0x38>
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	47c0      	blx	r8
 8000bd6:	4306      	orrs	r6, r0
 8000bd8:	3568      	adds	r5, #104	@ 0x68
 8000bda:	e7e9      	b.n	8000bb0 <_fwalk_sglue+0x10>

08000bdc <iprintf>:
 8000bdc:	b40f      	push	{r0, r1, r2, r3}
 8000bde:	b507      	push	{r0, r1, r2, lr}
 8000be0:	4906      	ldr	r1, [pc, #24]	@ (8000bfc <iprintf+0x20>)
 8000be2:	ab04      	add	r3, sp, #16
 8000be4:	6808      	ldr	r0, [r1, #0]
 8000be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bea:	6881      	ldr	r1, [r0, #8]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	f000 f9e9 	bl	8000fc4 <_vfiprintf_r>
 8000bf2:	b003      	add	sp, #12
 8000bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <__sread>:
 8000c00:	b510      	push	{r4, lr}
 8000c02:	460c      	mov	r4, r1
 8000c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c08:	f000 f868 	bl	8000cdc <_read_r>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	bfab      	itete	ge
 8000c10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000c12:	89a3      	ldrhlt	r3, [r4, #12]
 8000c14:	181b      	addge	r3, r3, r0
 8000c16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c1a:	bfac      	ite	ge
 8000c1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c1e:	81a3      	strhlt	r3, [r4, #12]
 8000c20:	bd10      	pop	{r4, pc}

08000c22 <__swrite>:
 8000c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c26:	461f      	mov	r7, r3
 8000c28:	898b      	ldrh	r3, [r1, #12]
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4616      	mov	r6, r2
 8000c32:	d505      	bpl.n	8000c40 <__swrite+0x1e>
 8000c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c38:	2302      	movs	r3, #2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f000 f83c 	bl	8000cb8 <_lseek_r>
 8000c40:	89a3      	ldrh	r3, [r4, #12]
 8000c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c4a:	81a3      	strh	r3, [r4, #12]
 8000c4c:	4632      	mov	r2, r6
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4628      	mov	r0, r5
 8000c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c56:	f000 b853 	b.w	8000d00 <_write_r>

08000c5a <__sseek>:
 8000c5a:	b510      	push	{r4, lr}
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c62:	f000 f829 	bl	8000cb8 <_lseek_r>
 8000c66:	1c43      	adds	r3, r0, #1
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	bf15      	itete	ne
 8000c6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c76:	81a3      	strheq	r3, [r4, #12]
 8000c78:	bf18      	it	ne
 8000c7a:	81a3      	strhne	r3, [r4, #12]
 8000c7c:	bd10      	pop	{r4, pc}

08000c7e <__sclose>:
 8000c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c82:	f000 b809 	b.w	8000c98 <_close_r>

08000c86 <memset>:
 8000c86:	4402      	add	r2, r0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d100      	bne.n	8000c90 <memset+0xa>
 8000c8e:	4770      	bx	lr
 8000c90:	f803 1b01 	strb.w	r1, [r3], #1
 8000c94:	e7f9      	b.n	8000c8a <memset+0x4>
	...

08000c98 <_close_r>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4d06      	ldr	r5, [pc, #24]	@ (8000cb4 <_close_r+0x1c>)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	602b      	str	r3, [r5, #0]
 8000ca4:	f7ff fd89 	bl	80007ba <_close>
 8000ca8:	1c43      	adds	r3, r0, #1
 8000caa:	d102      	bne.n	8000cb2 <_close_r+0x1a>
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	b103      	cbz	r3, 8000cb2 <_close_r+0x1a>
 8000cb0:	6023      	str	r3, [r4, #0]
 8000cb2:	bd38      	pop	{r3, r4, r5, pc}
 8000cb4:	200014a4 	.word	0x200014a4

08000cb8 <_lseek_r>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4d07      	ldr	r5, [pc, #28]	@ (8000cd8 <_lseek_r+0x20>)
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	602a      	str	r2, [r5, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f7ff fd9e 	bl	8000808 <_lseek>
 8000ccc:	1c43      	adds	r3, r0, #1
 8000cce:	d102      	bne.n	8000cd6 <_lseek_r+0x1e>
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	b103      	cbz	r3, 8000cd6 <_lseek_r+0x1e>
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	200014a4 	.word	0x200014a4

08000cdc <_read_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4d07      	ldr	r5, [pc, #28]	@ (8000cfc <_read_r+0x20>)
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	602a      	str	r2, [r5, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	f7ff fd2c 	bl	8000748 <_read>
 8000cf0:	1c43      	adds	r3, r0, #1
 8000cf2:	d102      	bne.n	8000cfa <_read_r+0x1e>
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	b103      	cbz	r3, 8000cfa <_read_r+0x1e>
 8000cf8:	6023      	str	r3, [r4, #0]
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}
 8000cfc:	200014a4 	.word	0x200014a4

08000d00 <_write_r>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	4d07      	ldr	r5, [pc, #28]	@ (8000d20 <_write_r+0x20>)
 8000d04:	4604      	mov	r4, r0
 8000d06:	4608      	mov	r0, r1
 8000d08:	4611      	mov	r1, r2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	602a      	str	r2, [r5, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f7ff fd37 	bl	8000782 <_write>
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	d102      	bne.n	8000d1e <_write_r+0x1e>
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	b103      	cbz	r3, 8000d1e <_write_r+0x1e>
 8000d1c:	6023      	str	r3, [r4, #0]
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	200014a4 	.word	0x200014a4

08000d24 <__errno>:
 8000d24:	4b01      	ldr	r3, [pc, #4]	@ (8000d2c <__errno+0x8>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2000000c 	.word	0x2000000c

08000d30 <__libc_init_array>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	4d0d      	ldr	r5, [pc, #52]	@ (8000d68 <__libc_init_array+0x38>)
 8000d34:	4c0d      	ldr	r4, [pc, #52]	@ (8000d6c <__libc_init_array+0x3c>)
 8000d36:	1b64      	subs	r4, r4, r5
 8000d38:	10a4      	asrs	r4, r4, #2
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	42a6      	cmp	r6, r4
 8000d3e:	d109      	bne.n	8000d54 <__libc_init_array+0x24>
 8000d40:	4d0b      	ldr	r5, [pc, #44]	@ (8000d70 <__libc_init_array+0x40>)
 8000d42:	4c0c      	ldr	r4, [pc, #48]	@ (8000d74 <__libc_init_array+0x44>)
 8000d44:	f000 fdb8 	bl	80018b8 <_init>
 8000d48:	1b64      	subs	r4, r4, r5
 8000d4a:	10a4      	asrs	r4, r4, #2
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	42a6      	cmp	r6, r4
 8000d50:	d105      	bne.n	8000d5e <__libc_init_array+0x2e>
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d58:	4798      	blx	r3
 8000d5a:	3601      	adds	r6, #1
 8000d5c:	e7ee      	b.n	8000d3c <__libc_init_array+0xc>
 8000d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d62:	4798      	blx	r3
 8000d64:	3601      	adds	r6, #1
 8000d66:	e7f2      	b.n	8000d4e <__libc_init_array+0x1e>
 8000d68:	08001980 	.word	0x08001980
 8000d6c:	08001980 	.word	0x08001980
 8000d70:	08001980 	.word	0x08001980
 8000d74:	08001984 	.word	0x08001984

08000d78 <__retarget_lock_init_recursive>:
 8000d78:	4770      	bx	lr

08000d7a <__retarget_lock_acquire_recursive>:
 8000d7a:	4770      	bx	lr

08000d7c <__retarget_lock_release_recursive>:
 8000d7c:	4770      	bx	lr
	...

08000d80 <_free_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4605      	mov	r5, r0
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d041      	beq.n	8000e0c <_free_r+0x8c>
 8000d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d8c:	1f0c      	subs	r4, r1, #4
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfb8      	it	lt
 8000d92:	18e4      	addlt	r4, r4, r3
 8000d94:	f000 f8e0 	bl	8000f58 <__malloc_lock>
 8000d98:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <_free_r+0x90>)
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	b933      	cbnz	r3, 8000dac <_free_r+0x2c>
 8000d9e:	6063      	str	r3, [r4, #4]
 8000da0:	6014      	str	r4, [r2, #0]
 8000da2:	4628      	mov	r0, r5
 8000da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da8:	f000 b8dc 	b.w	8000f64 <__malloc_unlock>
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <_free_r+0x42>
 8000db0:	6820      	ldr	r0, [r4, #0]
 8000db2:	1821      	adds	r1, r4, r0
 8000db4:	428b      	cmp	r3, r1
 8000db6:	bf01      	itttt	eq
 8000db8:	6819      	ldreq	r1, [r3, #0]
 8000dba:	685b      	ldreq	r3, [r3, #4]
 8000dbc:	1809      	addeq	r1, r1, r0
 8000dbe:	6021      	streq	r1, [r4, #0]
 8000dc0:	e7ed      	b.n	8000d9e <_free_r+0x1e>
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	b10b      	cbz	r3, 8000dcc <_free_r+0x4c>
 8000dc8:	42a3      	cmp	r3, r4
 8000dca:	d9fa      	bls.n	8000dc2 <_free_r+0x42>
 8000dcc:	6811      	ldr	r1, [r2, #0]
 8000dce:	1850      	adds	r0, r2, r1
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	d10b      	bne.n	8000dec <_free_r+0x6c>
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	4401      	add	r1, r0
 8000dd8:	1850      	adds	r0, r2, r1
 8000dda:	4283      	cmp	r3, r0
 8000ddc:	6011      	str	r1, [r2, #0]
 8000dde:	d1e0      	bne.n	8000da2 <_free_r+0x22>
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	6053      	str	r3, [r2, #4]
 8000de6:	4408      	add	r0, r1
 8000de8:	6010      	str	r0, [r2, #0]
 8000dea:	e7da      	b.n	8000da2 <_free_r+0x22>
 8000dec:	d902      	bls.n	8000df4 <_free_r+0x74>
 8000dee:	230c      	movs	r3, #12
 8000df0:	602b      	str	r3, [r5, #0]
 8000df2:	e7d6      	b.n	8000da2 <_free_r+0x22>
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	1821      	adds	r1, r4, r0
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf04      	itt	eq
 8000dfc:	6819      	ldreq	r1, [r3, #0]
 8000dfe:	685b      	ldreq	r3, [r3, #4]
 8000e00:	6063      	str	r3, [r4, #4]
 8000e02:	bf04      	itt	eq
 8000e04:	1809      	addeq	r1, r1, r0
 8000e06:	6021      	streq	r1, [r4, #0]
 8000e08:	6054      	str	r4, [r2, #4]
 8000e0a:	e7ca      	b.n	8000da2 <_free_r+0x22>
 8000e0c:	bd38      	pop	{r3, r4, r5, pc}
 8000e0e:	bf00      	nop
 8000e10:	200014b0 	.word	0x200014b0

08000e14 <sbrk_aligned>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	4e0f      	ldr	r6, [pc, #60]	@ (8000e54 <sbrk_aligned+0x40>)
 8000e18:	460c      	mov	r4, r1
 8000e1a:	6831      	ldr	r1, [r6, #0]
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	b911      	cbnz	r1, 8000e26 <sbrk_aligned+0x12>
 8000e20:	f000 fcb6 	bl	8001790 <_sbrk_r>
 8000e24:	6030      	str	r0, [r6, #0]
 8000e26:	4621      	mov	r1, r4
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f000 fcb1 	bl	8001790 <_sbrk_r>
 8000e2e:	1c43      	adds	r3, r0, #1
 8000e30:	d103      	bne.n	8000e3a <sbrk_aligned+0x26>
 8000e32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000e36:	4620      	mov	r0, r4
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
 8000e3a:	1cc4      	adds	r4, r0, #3
 8000e3c:	f024 0403 	bic.w	r4, r4, #3
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d0f8      	beq.n	8000e36 <sbrk_aligned+0x22>
 8000e44:	1a21      	subs	r1, r4, r0
 8000e46:	4628      	mov	r0, r5
 8000e48:	f000 fca2 	bl	8001790 <_sbrk_r>
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d1f2      	bne.n	8000e36 <sbrk_aligned+0x22>
 8000e50:	e7ef      	b.n	8000e32 <sbrk_aligned+0x1e>
 8000e52:	bf00      	nop
 8000e54:	200014ac 	.word	0x200014ac

08000e58 <_malloc_r>:
 8000e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e5c:	1ccd      	adds	r5, r1, #3
 8000e5e:	f025 0503 	bic.w	r5, r5, #3
 8000e62:	3508      	adds	r5, #8
 8000e64:	2d0c      	cmp	r5, #12
 8000e66:	bf38      	it	cc
 8000e68:	250c      	movcc	r5, #12
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	db01      	blt.n	8000e74 <_malloc_r+0x1c>
 8000e70:	42a9      	cmp	r1, r5
 8000e72:	d904      	bls.n	8000e7e <_malloc_r+0x26>
 8000e74:	230c      	movs	r3, #12
 8000e76:	6033      	str	r3, [r6, #0]
 8000e78:	2000      	movs	r0, #0
 8000e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f54 <_malloc_r+0xfc>
 8000e82:	f000 f869 	bl	8000f58 <__malloc_lock>
 8000e86:	f8d8 3000 	ldr.w	r3, [r8]
 8000e8a:	461c      	mov	r4, r3
 8000e8c:	bb44      	cbnz	r4, 8000ee0 <_malloc_r+0x88>
 8000e8e:	4629      	mov	r1, r5
 8000e90:	4630      	mov	r0, r6
 8000e92:	f7ff ffbf 	bl	8000e14 <sbrk_aligned>
 8000e96:	1c43      	adds	r3, r0, #1
 8000e98:	4604      	mov	r4, r0
 8000e9a:	d158      	bne.n	8000f4e <_malloc_r+0xf6>
 8000e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8000ea0:	4627      	mov	r7, r4
 8000ea2:	2f00      	cmp	r7, #0
 8000ea4:	d143      	bne.n	8000f2e <_malloc_r+0xd6>
 8000ea6:	2c00      	cmp	r4, #0
 8000ea8:	d04b      	beq.n	8000f42 <_malloc_r+0xea>
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	4639      	mov	r1, r7
 8000eae:	4630      	mov	r0, r6
 8000eb0:	eb04 0903 	add.w	r9, r4, r3
 8000eb4:	f000 fc6c 	bl	8001790 <_sbrk_r>
 8000eb8:	4581      	cmp	r9, r0
 8000eba:	d142      	bne.n	8000f42 <_malloc_r+0xea>
 8000ebc:	6821      	ldr	r1, [r4, #0]
 8000ebe:	1a6d      	subs	r5, r5, r1
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f7ff ffa6 	bl	8000e14 <sbrk_aligned>
 8000ec8:	3001      	adds	r0, #1
 8000eca:	d03a      	beq.n	8000f42 <_malloc_r+0xea>
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	442b      	add	r3, r5
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	bb62      	cbnz	r2, 8000f34 <_malloc_r+0xdc>
 8000eda:	f8c8 7000 	str.w	r7, [r8]
 8000ede:	e00f      	b.n	8000f00 <_malloc_r+0xa8>
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	1b52      	subs	r2, r2, r5
 8000ee4:	d420      	bmi.n	8000f28 <_malloc_r+0xd0>
 8000ee6:	2a0b      	cmp	r2, #11
 8000ee8:	d917      	bls.n	8000f1a <_malloc_r+0xc2>
 8000eea:	1961      	adds	r1, r4, r5
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	6025      	str	r5, [r4, #0]
 8000ef0:	bf18      	it	ne
 8000ef2:	6059      	strne	r1, [r3, #4]
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	bf08      	it	eq
 8000ef8:	f8c8 1000 	streq.w	r1, [r8]
 8000efc:	5162      	str	r2, [r4, r5]
 8000efe:	604b      	str	r3, [r1, #4]
 8000f00:	4630      	mov	r0, r6
 8000f02:	f000 f82f 	bl	8000f64 <__malloc_unlock>
 8000f06:	f104 000b 	add.w	r0, r4, #11
 8000f0a:	1d23      	adds	r3, r4, #4
 8000f0c:	f020 0007 	bic.w	r0, r0, #7
 8000f10:	1ac2      	subs	r2, r0, r3
 8000f12:	bf1c      	itt	ne
 8000f14:	1a1b      	subne	r3, r3, r0
 8000f16:	50a3      	strne	r3, [r4, r2]
 8000f18:	e7af      	b.n	8000e7a <_malloc_r+0x22>
 8000f1a:	6862      	ldr	r2, [r4, #4]
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	bf0c      	ite	eq
 8000f20:	f8c8 2000 	streq.w	r2, [r8]
 8000f24:	605a      	strne	r2, [r3, #4]
 8000f26:	e7eb      	b.n	8000f00 <_malloc_r+0xa8>
 8000f28:	4623      	mov	r3, r4
 8000f2a:	6864      	ldr	r4, [r4, #4]
 8000f2c:	e7ae      	b.n	8000e8c <_malloc_r+0x34>
 8000f2e:	463c      	mov	r4, r7
 8000f30:	687f      	ldr	r7, [r7, #4]
 8000f32:	e7b6      	b.n	8000ea2 <_malloc_r+0x4a>
 8000f34:	461a      	mov	r2, r3
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d1fb      	bne.n	8000f34 <_malloc_r+0xdc>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6053      	str	r3, [r2, #4]
 8000f40:	e7de      	b.n	8000f00 <_malloc_r+0xa8>
 8000f42:	230c      	movs	r3, #12
 8000f44:	6033      	str	r3, [r6, #0]
 8000f46:	4630      	mov	r0, r6
 8000f48:	f000 f80c 	bl	8000f64 <__malloc_unlock>
 8000f4c:	e794      	b.n	8000e78 <_malloc_r+0x20>
 8000f4e:	6005      	str	r5, [r0, #0]
 8000f50:	e7d6      	b.n	8000f00 <_malloc_r+0xa8>
 8000f52:	bf00      	nop
 8000f54:	200014b0 	.word	0x200014b0

08000f58 <__malloc_lock>:
 8000f58:	4801      	ldr	r0, [pc, #4]	@ (8000f60 <__malloc_lock+0x8>)
 8000f5a:	f7ff bf0e 	b.w	8000d7a <__retarget_lock_acquire_recursive>
 8000f5e:	bf00      	nop
 8000f60:	200014a8 	.word	0x200014a8

08000f64 <__malloc_unlock>:
 8000f64:	4801      	ldr	r0, [pc, #4]	@ (8000f6c <__malloc_unlock+0x8>)
 8000f66:	f7ff bf09 	b.w	8000d7c <__retarget_lock_release_recursive>
 8000f6a:	bf00      	nop
 8000f6c:	200014a8 	.word	0x200014a8

08000f70 <__sfputc_r>:
 8000f70:	6893      	ldr	r3, [r2, #8]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	b410      	push	{r4}
 8000f78:	6093      	str	r3, [r2, #8]
 8000f7a:	da08      	bge.n	8000f8e <__sfputc_r+0x1e>
 8000f7c:	6994      	ldr	r4, [r2, #24]
 8000f7e:	42a3      	cmp	r3, r4
 8000f80:	db01      	blt.n	8000f86 <__sfputc_r+0x16>
 8000f82:	290a      	cmp	r1, #10
 8000f84:	d103      	bne.n	8000f8e <__sfputc_r+0x1e>
 8000f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f8a:	f000 bb6d 	b.w	8001668 <__swbuf_r>
 8000f8e:	6813      	ldr	r3, [r2, #0]
 8000f90:	1c58      	adds	r0, r3, #1
 8000f92:	6010      	str	r0, [r2, #0]
 8000f94:	7019      	strb	r1, [r3, #0]
 8000f96:	4608      	mov	r0, r1
 8000f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <__sfputs_r>:
 8000f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	460f      	mov	r7, r1
 8000fa4:	4614      	mov	r4, r2
 8000fa6:	18d5      	adds	r5, r2, r3
 8000fa8:	42ac      	cmp	r4, r5
 8000faa:	d101      	bne.n	8000fb0 <__sfputs_r+0x12>
 8000fac:	2000      	movs	r0, #0
 8000fae:	e007      	b.n	8000fc0 <__sfputs_r+0x22>
 8000fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fb4:	463a      	mov	r2, r7
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f7ff ffda 	bl	8000f70 <__sfputc_r>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d1f3      	bne.n	8000fa8 <__sfputs_r+0xa>
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fc4 <_vfiprintf_r>:
 8000fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc8:	460d      	mov	r5, r1
 8000fca:	b09d      	sub	sp, #116	@ 0x74
 8000fcc:	4614      	mov	r4, r2
 8000fce:	4698      	mov	r8, r3
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	b118      	cbz	r0, 8000fdc <_vfiprintf_r+0x18>
 8000fd4:	6a03      	ldr	r3, [r0, #32]
 8000fd6:	b90b      	cbnz	r3, 8000fdc <_vfiprintf_r+0x18>
 8000fd8:	f7ff fdca 	bl	8000b70 <__sinit>
 8000fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fde:	07d9      	lsls	r1, r3, #31
 8000fe0:	d405      	bmi.n	8000fee <_vfiprintf_r+0x2a>
 8000fe2:	89ab      	ldrh	r3, [r5, #12]
 8000fe4:	059a      	lsls	r2, r3, #22
 8000fe6:	d402      	bmi.n	8000fee <_vfiprintf_r+0x2a>
 8000fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fea:	f7ff fec6 	bl	8000d7a <__retarget_lock_acquire_recursive>
 8000fee:	89ab      	ldrh	r3, [r5, #12]
 8000ff0:	071b      	lsls	r3, r3, #28
 8000ff2:	d501      	bpl.n	8000ff8 <_vfiprintf_r+0x34>
 8000ff4:	692b      	ldr	r3, [r5, #16]
 8000ff6:	b99b      	cbnz	r3, 8001020 <_vfiprintf_r+0x5c>
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f000 fb72 	bl	80016e4 <__swsetup_r>
 8001000:	b170      	cbz	r0, 8001020 <_vfiprintf_r+0x5c>
 8001002:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001004:	07dc      	lsls	r4, r3, #31
 8001006:	d504      	bpl.n	8001012 <_vfiprintf_r+0x4e>
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800100c:	b01d      	add	sp, #116	@ 0x74
 800100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001012:	89ab      	ldrh	r3, [r5, #12]
 8001014:	0598      	lsls	r0, r3, #22
 8001016:	d4f7      	bmi.n	8001008 <_vfiprintf_r+0x44>
 8001018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800101a:	f7ff feaf 	bl	8000d7c <__retarget_lock_release_recursive>
 800101e:	e7f3      	b.n	8001008 <_vfiprintf_r+0x44>
 8001020:	2300      	movs	r3, #0
 8001022:	9309      	str	r3, [sp, #36]	@ 0x24
 8001024:	2320      	movs	r3, #32
 8001026:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800102a:	f8cd 800c 	str.w	r8, [sp, #12]
 800102e:	2330      	movs	r3, #48	@ 0x30
 8001030:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80011e0 <_vfiprintf_r+0x21c>
 8001034:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001038:	f04f 0901 	mov.w	r9, #1
 800103c:	4623      	mov	r3, r4
 800103e:	469a      	mov	sl, r3
 8001040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001044:	b10a      	cbz	r2, 800104a <_vfiprintf_r+0x86>
 8001046:	2a25      	cmp	r2, #37	@ 0x25
 8001048:	d1f9      	bne.n	800103e <_vfiprintf_r+0x7a>
 800104a:	ebba 0b04 	subs.w	fp, sl, r4
 800104e:	d00b      	beq.n	8001068 <_vfiprintf_r+0xa4>
 8001050:	465b      	mov	r3, fp
 8001052:	4622      	mov	r2, r4
 8001054:	4629      	mov	r1, r5
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff ffa1 	bl	8000f9e <__sfputs_r>
 800105c:	3001      	adds	r0, #1
 800105e:	f000 80a7 	beq.w	80011b0 <_vfiprintf_r+0x1ec>
 8001062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001064:	445a      	add	r2, fp
 8001066:	9209      	str	r2, [sp, #36]	@ 0x24
 8001068:	f89a 3000 	ldrb.w	r3, [sl]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 809f 	beq.w	80011b0 <_vfiprintf_r+0x1ec>
 8001072:	2300      	movs	r3, #0
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800107c:	f10a 0a01 	add.w	sl, sl, #1
 8001080:	9304      	str	r3, [sp, #16]
 8001082:	9307      	str	r3, [sp, #28]
 8001084:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001088:	931a      	str	r3, [sp, #104]	@ 0x68
 800108a:	4654      	mov	r4, sl
 800108c:	2205      	movs	r2, #5
 800108e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001092:	4853      	ldr	r0, [pc, #332]	@ (80011e0 <_vfiprintf_r+0x21c>)
 8001094:	f7ff f8bc 	bl	8000210 <memchr>
 8001098:	9a04      	ldr	r2, [sp, #16]
 800109a:	b9d8      	cbnz	r0, 80010d4 <_vfiprintf_r+0x110>
 800109c:	06d1      	lsls	r1, r2, #27
 800109e:	bf44      	itt	mi
 80010a0:	2320      	movmi	r3, #32
 80010a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010a6:	0713      	lsls	r3, r2, #28
 80010a8:	bf44      	itt	mi
 80010aa:	232b      	movmi	r3, #43	@ 0x2b
 80010ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010b0:	f89a 3000 	ldrb.w	r3, [sl]
 80010b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80010b6:	d015      	beq.n	80010e4 <_vfiprintf_r+0x120>
 80010b8:	9a07      	ldr	r2, [sp, #28]
 80010ba:	4654      	mov	r4, sl
 80010bc:	2000      	movs	r0, #0
 80010be:	f04f 0c0a 	mov.w	ip, #10
 80010c2:	4621      	mov	r1, r4
 80010c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010c8:	3b30      	subs	r3, #48	@ 0x30
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	d94b      	bls.n	8001166 <_vfiprintf_r+0x1a2>
 80010ce:	b1b0      	cbz	r0, 80010fe <_vfiprintf_r+0x13a>
 80010d0:	9207      	str	r2, [sp, #28]
 80010d2:	e014      	b.n	80010fe <_vfiprintf_r+0x13a>
 80010d4:	eba0 0308 	sub.w	r3, r0, r8
 80010d8:	fa09 f303 	lsl.w	r3, r9, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	9304      	str	r3, [sp, #16]
 80010e0:	46a2      	mov	sl, r4
 80010e2:	e7d2      	b.n	800108a <_vfiprintf_r+0xc6>
 80010e4:	9b03      	ldr	r3, [sp, #12]
 80010e6:	1d19      	adds	r1, r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	9103      	str	r1, [sp, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bfbb      	ittet	lt
 80010f0:	425b      	neglt	r3, r3
 80010f2:	f042 0202 	orrlt.w	r2, r2, #2
 80010f6:	9307      	strge	r3, [sp, #28]
 80010f8:	9307      	strlt	r3, [sp, #28]
 80010fa:	bfb8      	it	lt
 80010fc:	9204      	strlt	r2, [sp, #16]
 80010fe:	7823      	ldrb	r3, [r4, #0]
 8001100:	2b2e      	cmp	r3, #46	@ 0x2e
 8001102:	d10a      	bne.n	800111a <_vfiprintf_r+0x156>
 8001104:	7863      	ldrb	r3, [r4, #1]
 8001106:	2b2a      	cmp	r3, #42	@ 0x2a
 8001108:	d132      	bne.n	8001170 <_vfiprintf_r+0x1ac>
 800110a:	9b03      	ldr	r3, [sp, #12]
 800110c:	1d1a      	adds	r2, r3, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	9203      	str	r2, [sp, #12]
 8001112:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001116:	3402      	adds	r4, #2
 8001118:	9305      	str	r3, [sp, #20]
 800111a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80011f0 <_vfiprintf_r+0x22c>
 800111e:	7821      	ldrb	r1, [r4, #0]
 8001120:	2203      	movs	r2, #3
 8001122:	4650      	mov	r0, sl
 8001124:	f7ff f874 	bl	8000210 <memchr>
 8001128:	b138      	cbz	r0, 800113a <_vfiprintf_r+0x176>
 800112a:	9b04      	ldr	r3, [sp, #16]
 800112c:	eba0 000a 	sub.w	r0, r0, sl
 8001130:	2240      	movs	r2, #64	@ 0x40
 8001132:	4082      	lsls	r2, r0
 8001134:	4313      	orrs	r3, r2
 8001136:	3401      	adds	r4, #1
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800113e:	4829      	ldr	r0, [pc, #164]	@ (80011e4 <_vfiprintf_r+0x220>)
 8001140:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001144:	2206      	movs	r2, #6
 8001146:	f7ff f863 	bl	8000210 <memchr>
 800114a:	2800      	cmp	r0, #0
 800114c:	d03f      	beq.n	80011ce <_vfiprintf_r+0x20a>
 800114e:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <_vfiprintf_r+0x224>)
 8001150:	bb1b      	cbnz	r3, 800119a <_vfiprintf_r+0x1d6>
 8001152:	9b03      	ldr	r3, [sp, #12]
 8001154:	3307      	adds	r3, #7
 8001156:	f023 0307 	bic.w	r3, r3, #7
 800115a:	3308      	adds	r3, #8
 800115c:	9303      	str	r3, [sp, #12]
 800115e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001160:	443b      	add	r3, r7
 8001162:	9309      	str	r3, [sp, #36]	@ 0x24
 8001164:	e76a      	b.n	800103c <_vfiprintf_r+0x78>
 8001166:	fb0c 3202 	mla	r2, ip, r2, r3
 800116a:	460c      	mov	r4, r1
 800116c:	2001      	movs	r0, #1
 800116e:	e7a8      	b.n	80010c2 <_vfiprintf_r+0xfe>
 8001170:	2300      	movs	r3, #0
 8001172:	3401      	adds	r4, #1
 8001174:	9305      	str	r3, [sp, #20]
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 0c0a 	mov.w	ip, #10
 800117c:	4620      	mov	r0, r4
 800117e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001182:	3a30      	subs	r2, #48	@ 0x30
 8001184:	2a09      	cmp	r2, #9
 8001186:	d903      	bls.n	8001190 <_vfiprintf_r+0x1cc>
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0c6      	beq.n	800111a <_vfiprintf_r+0x156>
 800118c:	9105      	str	r1, [sp, #20]
 800118e:	e7c4      	b.n	800111a <_vfiprintf_r+0x156>
 8001190:	fb0c 2101 	mla	r1, ip, r1, r2
 8001194:	4604      	mov	r4, r0
 8001196:	2301      	movs	r3, #1
 8001198:	e7f0      	b.n	800117c <_vfiprintf_r+0x1b8>
 800119a:	ab03      	add	r3, sp, #12
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	462a      	mov	r2, r5
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <_vfiprintf_r+0x228>)
 80011a2:	a904      	add	r1, sp, #16
 80011a4:	4630      	mov	r0, r6
 80011a6:	f3af 8000 	nop.w
 80011aa:	4607      	mov	r7, r0
 80011ac:	1c78      	adds	r0, r7, #1
 80011ae:	d1d6      	bne.n	800115e <_vfiprintf_r+0x19a>
 80011b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80011b2:	07d9      	lsls	r1, r3, #31
 80011b4:	d405      	bmi.n	80011c2 <_vfiprintf_r+0x1fe>
 80011b6:	89ab      	ldrh	r3, [r5, #12]
 80011b8:	059a      	lsls	r2, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_vfiprintf_r+0x1fe>
 80011bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011be:	f7ff fddd 	bl	8000d7c <__retarget_lock_release_recursive>
 80011c2:	89ab      	ldrh	r3, [r5, #12]
 80011c4:	065b      	lsls	r3, r3, #25
 80011c6:	f53f af1f 	bmi.w	8001008 <_vfiprintf_r+0x44>
 80011ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80011cc:	e71e      	b.n	800100c <_vfiprintf_r+0x48>
 80011ce:	ab03      	add	r3, sp, #12
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	462a      	mov	r2, r5
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <_vfiprintf_r+0x228>)
 80011d6:	a904      	add	r1, sp, #16
 80011d8:	4630      	mov	r0, r6
 80011da:	f000 f879 	bl	80012d0 <_printf_i>
 80011de:	e7e4      	b.n	80011aa <_vfiprintf_r+0x1e6>
 80011e0:	08001942 	.word	0x08001942
 80011e4:	0800194c 	.word	0x0800194c
 80011e8:	00000000 	.word	0x00000000
 80011ec:	08000f9f 	.word	0x08000f9f
 80011f0:	08001948 	.word	0x08001948

080011f4 <_printf_common>:
 80011f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f8:	4616      	mov	r6, r2
 80011fa:	4698      	mov	r8, r3
 80011fc:	688a      	ldr	r2, [r1, #8]
 80011fe:	690b      	ldr	r3, [r1, #16]
 8001200:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001204:	4293      	cmp	r3, r2
 8001206:	bfb8      	it	lt
 8001208:	4613      	movlt	r3, r2
 800120a:	6033      	str	r3, [r6, #0]
 800120c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001210:	4607      	mov	r7, r0
 8001212:	460c      	mov	r4, r1
 8001214:	b10a      	cbz	r2, 800121a <_printf_common+0x26>
 8001216:	3301      	adds	r3, #1
 8001218:	6033      	str	r3, [r6, #0]
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	0699      	lsls	r1, r3, #26
 800121e:	bf42      	ittt	mi
 8001220:	6833      	ldrmi	r3, [r6, #0]
 8001222:	3302      	addmi	r3, #2
 8001224:	6033      	strmi	r3, [r6, #0]
 8001226:	6825      	ldr	r5, [r4, #0]
 8001228:	f015 0506 	ands.w	r5, r5, #6
 800122c:	d106      	bne.n	800123c <_printf_common+0x48>
 800122e:	f104 0a19 	add.w	sl, r4, #25
 8001232:	68e3      	ldr	r3, [r4, #12]
 8001234:	6832      	ldr	r2, [r6, #0]
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	42ab      	cmp	r3, r5
 800123a:	dc26      	bgt.n	800128a <_printf_common+0x96>
 800123c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001240:	6822      	ldr	r2, [r4, #0]
 8001242:	3b00      	subs	r3, #0
 8001244:	bf18      	it	ne
 8001246:	2301      	movne	r3, #1
 8001248:	0692      	lsls	r2, r2, #26
 800124a:	d42b      	bmi.n	80012a4 <_printf_common+0xb0>
 800124c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001250:	4641      	mov	r1, r8
 8001252:	4638      	mov	r0, r7
 8001254:	47c8      	blx	r9
 8001256:	3001      	adds	r0, #1
 8001258:	d01e      	beq.n	8001298 <_printf_common+0xa4>
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	6922      	ldr	r2, [r4, #16]
 800125e:	f003 0306 	and.w	r3, r3, #6
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf02      	ittt	eq
 8001266:	68e5      	ldreq	r5, [r4, #12]
 8001268:	6833      	ldreq	r3, [r6, #0]
 800126a:	1aed      	subeq	r5, r5, r3
 800126c:	68a3      	ldr	r3, [r4, #8]
 800126e:	bf0c      	ite	eq
 8001270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001274:	2500      	movne	r5, #0
 8001276:	4293      	cmp	r3, r2
 8001278:	bfc4      	itt	gt
 800127a:	1a9b      	subgt	r3, r3, r2
 800127c:	18ed      	addgt	r5, r5, r3
 800127e:	2600      	movs	r6, #0
 8001280:	341a      	adds	r4, #26
 8001282:	42b5      	cmp	r5, r6
 8001284:	d11a      	bne.n	80012bc <_printf_common+0xc8>
 8001286:	2000      	movs	r0, #0
 8001288:	e008      	b.n	800129c <_printf_common+0xa8>
 800128a:	2301      	movs	r3, #1
 800128c:	4652      	mov	r2, sl
 800128e:	4641      	mov	r1, r8
 8001290:	4638      	mov	r0, r7
 8001292:	47c8      	blx	r9
 8001294:	3001      	adds	r0, #1
 8001296:	d103      	bne.n	80012a0 <_printf_common+0xac>
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800129c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a0:	3501      	adds	r5, #1
 80012a2:	e7c6      	b.n	8001232 <_printf_common+0x3e>
 80012a4:	18e1      	adds	r1, r4, r3
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	2030      	movs	r0, #48	@ 0x30
 80012aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80012ae:	4422      	add	r2, r4
 80012b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80012b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80012b8:	3302      	adds	r3, #2
 80012ba:	e7c7      	b.n	800124c <_printf_common+0x58>
 80012bc:	2301      	movs	r3, #1
 80012be:	4622      	mov	r2, r4
 80012c0:	4641      	mov	r1, r8
 80012c2:	4638      	mov	r0, r7
 80012c4:	47c8      	blx	r9
 80012c6:	3001      	adds	r0, #1
 80012c8:	d0e6      	beq.n	8001298 <_printf_common+0xa4>
 80012ca:	3601      	adds	r6, #1
 80012cc:	e7d9      	b.n	8001282 <_printf_common+0x8e>
	...

080012d0 <_printf_i>:
 80012d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012d4:	7e0f      	ldrb	r7, [r1, #24]
 80012d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80012d8:	2f78      	cmp	r7, #120	@ 0x78
 80012da:	4691      	mov	r9, r2
 80012dc:	4680      	mov	r8, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	469a      	mov	sl, r3
 80012e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80012e6:	d807      	bhi.n	80012f8 <_printf_i+0x28>
 80012e8:	2f62      	cmp	r7, #98	@ 0x62
 80012ea:	d80a      	bhi.n	8001302 <_printf_i+0x32>
 80012ec:	2f00      	cmp	r7, #0
 80012ee:	f000 80d2 	beq.w	8001496 <_printf_i+0x1c6>
 80012f2:	2f58      	cmp	r7, #88	@ 0x58
 80012f4:	f000 80b9 	beq.w	800146a <_printf_i+0x19a>
 80012f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001300:	e03a      	b.n	8001378 <_printf_i+0xa8>
 8001302:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001306:	2b15      	cmp	r3, #21
 8001308:	d8f6      	bhi.n	80012f8 <_printf_i+0x28>
 800130a:	a101      	add	r1, pc, #4	@ (adr r1, 8001310 <_printf_i+0x40>)
 800130c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001310:	08001369 	.word	0x08001369
 8001314:	0800137d 	.word	0x0800137d
 8001318:	080012f9 	.word	0x080012f9
 800131c:	080012f9 	.word	0x080012f9
 8001320:	080012f9 	.word	0x080012f9
 8001324:	080012f9 	.word	0x080012f9
 8001328:	0800137d 	.word	0x0800137d
 800132c:	080012f9 	.word	0x080012f9
 8001330:	080012f9 	.word	0x080012f9
 8001334:	080012f9 	.word	0x080012f9
 8001338:	080012f9 	.word	0x080012f9
 800133c:	0800147d 	.word	0x0800147d
 8001340:	080013a7 	.word	0x080013a7
 8001344:	08001437 	.word	0x08001437
 8001348:	080012f9 	.word	0x080012f9
 800134c:	080012f9 	.word	0x080012f9
 8001350:	0800149f 	.word	0x0800149f
 8001354:	080012f9 	.word	0x080012f9
 8001358:	080013a7 	.word	0x080013a7
 800135c:	080012f9 	.word	0x080012f9
 8001360:	080012f9 	.word	0x080012f9
 8001364:	0800143f 	.word	0x0800143f
 8001368:	6833      	ldr	r3, [r6, #0]
 800136a:	1d1a      	adds	r2, r3, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6032      	str	r2, [r6, #0]
 8001370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001374:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001378:	2301      	movs	r3, #1
 800137a:	e09d      	b.n	80014b8 <_printf_i+0x1e8>
 800137c:	6833      	ldr	r3, [r6, #0]
 800137e:	6820      	ldr	r0, [r4, #0]
 8001380:	1d19      	adds	r1, r3, #4
 8001382:	6031      	str	r1, [r6, #0]
 8001384:	0606      	lsls	r6, r0, #24
 8001386:	d501      	bpl.n	800138c <_printf_i+0xbc>
 8001388:	681d      	ldr	r5, [r3, #0]
 800138a:	e003      	b.n	8001394 <_printf_i+0xc4>
 800138c:	0645      	lsls	r5, r0, #25
 800138e:	d5fb      	bpl.n	8001388 <_printf_i+0xb8>
 8001390:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001394:	2d00      	cmp	r5, #0
 8001396:	da03      	bge.n	80013a0 <_printf_i+0xd0>
 8001398:	232d      	movs	r3, #45	@ 0x2d
 800139a:	426d      	negs	r5, r5
 800139c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013a0:	4859      	ldr	r0, [pc, #356]	@ (8001508 <_printf_i+0x238>)
 80013a2:	230a      	movs	r3, #10
 80013a4:	e011      	b.n	80013ca <_printf_i+0xfa>
 80013a6:	6821      	ldr	r1, [r4, #0]
 80013a8:	6833      	ldr	r3, [r6, #0]
 80013aa:	0608      	lsls	r0, r1, #24
 80013ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80013b0:	d402      	bmi.n	80013b8 <_printf_i+0xe8>
 80013b2:	0649      	lsls	r1, r1, #25
 80013b4:	bf48      	it	mi
 80013b6:	b2ad      	uxthmi	r5, r5
 80013b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80013ba:	4853      	ldr	r0, [pc, #332]	@ (8001508 <_printf_i+0x238>)
 80013bc:	6033      	str	r3, [r6, #0]
 80013be:	bf14      	ite	ne
 80013c0:	230a      	movne	r3, #10
 80013c2:	2308      	moveq	r3, #8
 80013c4:	2100      	movs	r1, #0
 80013c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80013ca:	6866      	ldr	r6, [r4, #4]
 80013cc:	60a6      	str	r6, [r4, #8]
 80013ce:	2e00      	cmp	r6, #0
 80013d0:	bfa2      	ittt	ge
 80013d2:	6821      	ldrge	r1, [r4, #0]
 80013d4:	f021 0104 	bicge.w	r1, r1, #4
 80013d8:	6021      	strge	r1, [r4, #0]
 80013da:	b90d      	cbnz	r5, 80013e0 <_printf_i+0x110>
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d04b      	beq.n	8001478 <_printf_i+0x1a8>
 80013e0:	4616      	mov	r6, r2
 80013e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80013e6:	fb03 5711 	mls	r7, r3, r1, r5
 80013ea:	5dc7      	ldrb	r7, [r0, r7]
 80013ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80013f0:	462f      	mov	r7, r5
 80013f2:	42bb      	cmp	r3, r7
 80013f4:	460d      	mov	r5, r1
 80013f6:	d9f4      	bls.n	80013e2 <_printf_i+0x112>
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d10b      	bne.n	8001414 <_printf_i+0x144>
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	07df      	lsls	r7, r3, #31
 8001400:	d508      	bpl.n	8001414 <_printf_i+0x144>
 8001402:	6923      	ldr	r3, [r4, #16]
 8001404:	6861      	ldr	r1, [r4, #4]
 8001406:	4299      	cmp	r1, r3
 8001408:	bfde      	ittt	le
 800140a:	2330      	movle	r3, #48	@ 0x30
 800140c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001410:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001414:	1b92      	subs	r2, r2, r6
 8001416:	6122      	str	r2, [r4, #16]
 8001418:	f8cd a000 	str.w	sl, [sp]
 800141c:	464b      	mov	r3, r9
 800141e:	aa03      	add	r2, sp, #12
 8001420:	4621      	mov	r1, r4
 8001422:	4640      	mov	r0, r8
 8001424:	f7ff fee6 	bl	80011f4 <_printf_common>
 8001428:	3001      	adds	r0, #1
 800142a:	d14a      	bne.n	80014c2 <_printf_i+0x1f2>
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001430:	b004      	add	sp, #16
 8001432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	4833      	ldr	r0, [pc, #204]	@ (800150c <_printf_i+0x23c>)
 8001440:	2778      	movs	r7, #120	@ 0x78
 8001442:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	6831      	ldr	r1, [r6, #0]
 800144a:	061f      	lsls	r7, r3, #24
 800144c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001450:	d402      	bmi.n	8001458 <_printf_i+0x188>
 8001452:	065f      	lsls	r7, r3, #25
 8001454:	bf48      	it	mi
 8001456:	b2ad      	uxthmi	r5, r5
 8001458:	6031      	str	r1, [r6, #0]
 800145a:	07d9      	lsls	r1, r3, #31
 800145c:	bf44      	itt	mi
 800145e:	f043 0320 	orrmi.w	r3, r3, #32
 8001462:	6023      	strmi	r3, [r4, #0]
 8001464:	b11d      	cbz	r5, 800146e <_printf_i+0x19e>
 8001466:	2310      	movs	r3, #16
 8001468:	e7ac      	b.n	80013c4 <_printf_i+0xf4>
 800146a:	4827      	ldr	r0, [pc, #156]	@ (8001508 <_printf_i+0x238>)
 800146c:	e7e9      	b.n	8001442 <_printf_i+0x172>
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	f023 0320 	bic.w	r3, r3, #32
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	e7f6      	b.n	8001466 <_printf_i+0x196>
 8001478:	4616      	mov	r6, r2
 800147a:	e7bd      	b.n	80013f8 <_printf_i+0x128>
 800147c:	6833      	ldr	r3, [r6, #0]
 800147e:	6825      	ldr	r5, [r4, #0]
 8001480:	6961      	ldr	r1, [r4, #20]
 8001482:	1d18      	adds	r0, r3, #4
 8001484:	6030      	str	r0, [r6, #0]
 8001486:	062e      	lsls	r6, r5, #24
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	d501      	bpl.n	8001490 <_printf_i+0x1c0>
 800148c:	6019      	str	r1, [r3, #0]
 800148e:	e002      	b.n	8001496 <_printf_i+0x1c6>
 8001490:	0668      	lsls	r0, r5, #25
 8001492:	d5fb      	bpl.n	800148c <_printf_i+0x1bc>
 8001494:	8019      	strh	r1, [r3, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	6123      	str	r3, [r4, #16]
 800149a:	4616      	mov	r6, r2
 800149c:	e7bc      	b.n	8001418 <_printf_i+0x148>
 800149e:	6833      	ldr	r3, [r6, #0]
 80014a0:	1d1a      	adds	r2, r3, #4
 80014a2:	6032      	str	r2, [r6, #0]
 80014a4:	681e      	ldr	r6, [r3, #0]
 80014a6:	6862      	ldr	r2, [r4, #4]
 80014a8:	2100      	movs	r1, #0
 80014aa:	4630      	mov	r0, r6
 80014ac:	f7fe feb0 	bl	8000210 <memchr>
 80014b0:	b108      	cbz	r0, 80014b6 <_printf_i+0x1e6>
 80014b2:	1b80      	subs	r0, r0, r6
 80014b4:	6060      	str	r0, [r4, #4]
 80014b6:	6863      	ldr	r3, [r4, #4]
 80014b8:	6123      	str	r3, [r4, #16]
 80014ba:	2300      	movs	r3, #0
 80014bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014c0:	e7aa      	b.n	8001418 <_printf_i+0x148>
 80014c2:	6923      	ldr	r3, [r4, #16]
 80014c4:	4632      	mov	r2, r6
 80014c6:	4649      	mov	r1, r9
 80014c8:	4640      	mov	r0, r8
 80014ca:	47d0      	blx	sl
 80014cc:	3001      	adds	r0, #1
 80014ce:	d0ad      	beq.n	800142c <_printf_i+0x15c>
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	079b      	lsls	r3, r3, #30
 80014d4:	d413      	bmi.n	80014fe <_printf_i+0x22e>
 80014d6:	68e0      	ldr	r0, [r4, #12]
 80014d8:	9b03      	ldr	r3, [sp, #12]
 80014da:	4298      	cmp	r0, r3
 80014dc:	bfb8      	it	lt
 80014de:	4618      	movlt	r0, r3
 80014e0:	e7a6      	b.n	8001430 <_printf_i+0x160>
 80014e2:	2301      	movs	r3, #1
 80014e4:	4632      	mov	r2, r6
 80014e6:	4649      	mov	r1, r9
 80014e8:	4640      	mov	r0, r8
 80014ea:	47d0      	blx	sl
 80014ec:	3001      	adds	r0, #1
 80014ee:	d09d      	beq.n	800142c <_printf_i+0x15c>
 80014f0:	3501      	adds	r5, #1
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	9903      	ldr	r1, [sp, #12]
 80014f6:	1a5b      	subs	r3, r3, r1
 80014f8:	42ab      	cmp	r3, r5
 80014fa:	dcf2      	bgt.n	80014e2 <_printf_i+0x212>
 80014fc:	e7eb      	b.n	80014d6 <_printf_i+0x206>
 80014fe:	2500      	movs	r5, #0
 8001500:	f104 0619 	add.w	r6, r4, #25
 8001504:	e7f5      	b.n	80014f2 <_printf_i+0x222>
 8001506:	bf00      	nop
 8001508:	08001953 	.word	0x08001953
 800150c:	08001964 	.word	0x08001964

08001510 <__sflush_r>:
 8001510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001518:	0716      	lsls	r6, r2, #28
 800151a:	4605      	mov	r5, r0
 800151c:	460c      	mov	r4, r1
 800151e:	d454      	bmi.n	80015ca <__sflush_r+0xba>
 8001520:	684b      	ldr	r3, [r1, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc02      	bgt.n	800152c <__sflush_r+0x1c>
 8001526:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd48      	ble.n	80015be <__sflush_r+0xae>
 800152c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800152e:	2e00      	cmp	r6, #0
 8001530:	d045      	beq.n	80015be <__sflush_r+0xae>
 8001532:	2300      	movs	r3, #0
 8001534:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001538:	682f      	ldr	r7, [r5, #0]
 800153a:	6a21      	ldr	r1, [r4, #32]
 800153c:	602b      	str	r3, [r5, #0]
 800153e:	d030      	beq.n	80015a2 <__sflush_r+0x92>
 8001540:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001542:	89a3      	ldrh	r3, [r4, #12]
 8001544:	0759      	lsls	r1, r3, #29
 8001546:	d505      	bpl.n	8001554 <__sflush_r+0x44>
 8001548:	6863      	ldr	r3, [r4, #4]
 800154a:	1ad2      	subs	r2, r2, r3
 800154c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800154e:	b10b      	cbz	r3, 8001554 <__sflush_r+0x44>
 8001550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001552:	1ad2      	subs	r2, r2, r3
 8001554:	2300      	movs	r3, #0
 8001556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001558:	6a21      	ldr	r1, [r4, #32]
 800155a:	4628      	mov	r0, r5
 800155c:	47b0      	blx	r6
 800155e:	1c43      	adds	r3, r0, #1
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	d106      	bne.n	8001572 <__sflush_r+0x62>
 8001564:	6829      	ldr	r1, [r5, #0]
 8001566:	291d      	cmp	r1, #29
 8001568:	d82b      	bhi.n	80015c2 <__sflush_r+0xb2>
 800156a:	4a2a      	ldr	r2, [pc, #168]	@ (8001614 <__sflush_r+0x104>)
 800156c:	410a      	asrs	r2, r1
 800156e:	07d6      	lsls	r6, r2, #31
 8001570:	d427      	bmi.n	80015c2 <__sflush_r+0xb2>
 8001572:	2200      	movs	r2, #0
 8001574:	6062      	str	r2, [r4, #4]
 8001576:	04d9      	lsls	r1, r3, #19
 8001578:	6922      	ldr	r2, [r4, #16]
 800157a:	6022      	str	r2, [r4, #0]
 800157c:	d504      	bpl.n	8001588 <__sflush_r+0x78>
 800157e:	1c42      	adds	r2, r0, #1
 8001580:	d101      	bne.n	8001586 <__sflush_r+0x76>
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	b903      	cbnz	r3, 8001588 <__sflush_r+0x78>
 8001586:	6560      	str	r0, [r4, #84]	@ 0x54
 8001588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800158a:	602f      	str	r7, [r5, #0]
 800158c:	b1b9      	cbz	r1, 80015be <__sflush_r+0xae>
 800158e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001592:	4299      	cmp	r1, r3
 8001594:	d002      	beq.n	800159c <__sflush_r+0x8c>
 8001596:	4628      	mov	r0, r5
 8001598:	f7ff fbf2 	bl	8000d80 <_free_r>
 800159c:	2300      	movs	r3, #0
 800159e:	6363      	str	r3, [r4, #52]	@ 0x34
 80015a0:	e00d      	b.n	80015be <__sflush_r+0xae>
 80015a2:	2301      	movs	r3, #1
 80015a4:	4628      	mov	r0, r5
 80015a6:	47b0      	blx	r6
 80015a8:	4602      	mov	r2, r0
 80015aa:	1c50      	adds	r0, r2, #1
 80015ac:	d1c9      	bne.n	8001542 <__sflush_r+0x32>
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0c6      	beq.n	8001542 <__sflush_r+0x32>
 80015b4:	2b1d      	cmp	r3, #29
 80015b6:	d001      	beq.n	80015bc <__sflush_r+0xac>
 80015b8:	2b16      	cmp	r3, #22
 80015ba:	d11e      	bne.n	80015fa <__sflush_r+0xea>
 80015bc:	602f      	str	r7, [r5, #0]
 80015be:	2000      	movs	r0, #0
 80015c0:	e022      	b.n	8001608 <__sflush_r+0xf8>
 80015c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	e01b      	b.n	8001602 <__sflush_r+0xf2>
 80015ca:	690f      	ldr	r7, [r1, #16]
 80015cc:	2f00      	cmp	r7, #0
 80015ce:	d0f6      	beq.n	80015be <__sflush_r+0xae>
 80015d0:	0793      	lsls	r3, r2, #30
 80015d2:	680e      	ldr	r6, [r1, #0]
 80015d4:	bf08      	it	eq
 80015d6:	694b      	ldreq	r3, [r1, #20]
 80015d8:	600f      	str	r7, [r1, #0]
 80015da:	bf18      	it	ne
 80015dc:	2300      	movne	r3, #0
 80015de:	eba6 0807 	sub.w	r8, r6, r7
 80015e2:	608b      	str	r3, [r1, #8]
 80015e4:	f1b8 0f00 	cmp.w	r8, #0
 80015e8:	dde9      	ble.n	80015be <__sflush_r+0xae>
 80015ea:	6a21      	ldr	r1, [r4, #32]
 80015ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80015ee:	4643      	mov	r3, r8
 80015f0:	463a      	mov	r2, r7
 80015f2:	4628      	mov	r0, r5
 80015f4:	47b0      	blx	r6
 80015f6:	2800      	cmp	r0, #0
 80015f8:	dc08      	bgt.n	800160c <__sflush_r+0xfc>
 80015fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001602:	81a3      	strh	r3, [r4, #12]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800160c:	4407      	add	r7, r0
 800160e:	eba8 0800 	sub.w	r8, r8, r0
 8001612:	e7e7      	b.n	80015e4 <__sflush_r+0xd4>
 8001614:	dfbffffe 	.word	0xdfbffffe

08001618 <_fflush_r>:
 8001618:	b538      	push	{r3, r4, r5, lr}
 800161a:	690b      	ldr	r3, [r1, #16]
 800161c:	4605      	mov	r5, r0
 800161e:	460c      	mov	r4, r1
 8001620:	b913      	cbnz	r3, 8001628 <_fflush_r+0x10>
 8001622:	2500      	movs	r5, #0
 8001624:	4628      	mov	r0, r5
 8001626:	bd38      	pop	{r3, r4, r5, pc}
 8001628:	b118      	cbz	r0, 8001632 <_fflush_r+0x1a>
 800162a:	6a03      	ldr	r3, [r0, #32]
 800162c:	b90b      	cbnz	r3, 8001632 <_fflush_r+0x1a>
 800162e:	f7ff fa9f 	bl	8000b70 <__sinit>
 8001632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f3      	beq.n	8001622 <_fflush_r+0xa>
 800163a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800163c:	07d0      	lsls	r0, r2, #31
 800163e:	d404      	bmi.n	800164a <_fflush_r+0x32>
 8001640:	0599      	lsls	r1, r3, #22
 8001642:	d402      	bmi.n	800164a <_fflush_r+0x32>
 8001644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001646:	f7ff fb98 	bl	8000d7a <__retarget_lock_acquire_recursive>
 800164a:	4628      	mov	r0, r5
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff ff5f 	bl	8001510 <__sflush_r>
 8001652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001654:	07da      	lsls	r2, r3, #31
 8001656:	4605      	mov	r5, r0
 8001658:	d4e4      	bmi.n	8001624 <_fflush_r+0xc>
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	059b      	lsls	r3, r3, #22
 800165e:	d4e1      	bmi.n	8001624 <_fflush_r+0xc>
 8001660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001662:	f7ff fb8b 	bl	8000d7c <__retarget_lock_release_recursive>
 8001666:	e7dd      	b.n	8001624 <_fflush_r+0xc>

08001668 <__swbuf_r>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	460e      	mov	r6, r1
 800166c:	4614      	mov	r4, r2
 800166e:	4605      	mov	r5, r0
 8001670:	b118      	cbz	r0, 800167a <__swbuf_r+0x12>
 8001672:	6a03      	ldr	r3, [r0, #32]
 8001674:	b90b      	cbnz	r3, 800167a <__swbuf_r+0x12>
 8001676:	f7ff fa7b 	bl	8000b70 <__sinit>
 800167a:	69a3      	ldr	r3, [r4, #24]
 800167c:	60a3      	str	r3, [r4, #8]
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	071a      	lsls	r2, r3, #28
 8001682:	d501      	bpl.n	8001688 <__swbuf_r+0x20>
 8001684:	6923      	ldr	r3, [r4, #16]
 8001686:	b943      	cbnz	r3, 800169a <__swbuf_r+0x32>
 8001688:	4621      	mov	r1, r4
 800168a:	4628      	mov	r0, r5
 800168c:	f000 f82a 	bl	80016e4 <__swsetup_r>
 8001690:	b118      	cbz	r0, 800169a <__swbuf_r+0x32>
 8001692:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001696:	4638      	mov	r0, r7
 8001698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	6922      	ldr	r2, [r4, #16]
 800169e:	1a98      	subs	r0, r3, r2
 80016a0:	6963      	ldr	r3, [r4, #20]
 80016a2:	b2f6      	uxtb	r6, r6
 80016a4:	4283      	cmp	r3, r0
 80016a6:	4637      	mov	r7, r6
 80016a8:	dc05      	bgt.n	80016b6 <__swbuf_r+0x4e>
 80016aa:	4621      	mov	r1, r4
 80016ac:	4628      	mov	r0, r5
 80016ae:	f7ff ffb3 	bl	8001618 <_fflush_r>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d1ed      	bne.n	8001692 <__swbuf_r+0x2a>
 80016b6:	68a3      	ldr	r3, [r4, #8]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60a3      	str	r3, [r4, #8]
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6022      	str	r2, [r4, #0]
 80016c2:	701e      	strb	r6, [r3, #0]
 80016c4:	6962      	ldr	r2, [r4, #20]
 80016c6:	1c43      	adds	r3, r0, #1
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d004      	beq.n	80016d6 <__swbuf_r+0x6e>
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	07db      	lsls	r3, r3, #31
 80016d0:	d5e1      	bpl.n	8001696 <__swbuf_r+0x2e>
 80016d2:	2e0a      	cmp	r6, #10
 80016d4:	d1df      	bne.n	8001696 <__swbuf_r+0x2e>
 80016d6:	4621      	mov	r1, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f7ff ff9d 	bl	8001618 <_fflush_r>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d0d9      	beq.n	8001696 <__swbuf_r+0x2e>
 80016e2:	e7d6      	b.n	8001692 <__swbuf_r+0x2a>

080016e4 <__swsetup_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <__swsetup_r+0xa8>)
 80016e8:	4605      	mov	r5, r0
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	460c      	mov	r4, r1
 80016ee:	b118      	cbz	r0, 80016f8 <__swsetup_r+0x14>
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	b90b      	cbnz	r3, 80016f8 <__swsetup_r+0x14>
 80016f4:	f7ff fa3c 	bl	8000b70 <__sinit>
 80016f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016fc:	0719      	lsls	r1, r3, #28
 80016fe:	d422      	bmi.n	8001746 <__swsetup_r+0x62>
 8001700:	06da      	lsls	r2, r3, #27
 8001702:	d407      	bmi.n	8001714 <__swsetup_r+0x30>
 8001704:	2209      	movs	r2, #9
 8001706:	602a      	str	r2, [r5, #0]
 8001708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800170c:	81a3      	strh	r3, [r4, #12]
 800170e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001712:	e033      	b.n	800177c <__swsetup_r+0x98>
 8001714:	0758      	lsls	r0, r3, #29
 8001716:	d512      	bpl.n	800173e <__swsetup_r+0x5a>
 8001718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800171a:	b141      	cbz	r1, 800172e <__swsetup_r+0x4a>
 800171c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001720:	4299      	cmp	r1, r3
 8001722:	d002      	beq.n	800172a <__swsetup_r+0x46>
 8001724:	4628      	mov	r0, r5
 8001726:	f7ff fb2b 	bl	8000d80 <_free_r>
 800172a:	2300      	movs	r3, #0
 800172c:	6363      	str	r3, [r4, #52]	@ 0x34
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001734:	81a3      	strh	r3, [r4, #12]
 8001736:	2300      	movs	r3, #0
 8001738:	6063      	str	r3, [r4, #4]
 800173a:	6923      	ldr	r3, [r4, #16]
 800173c:	6023      	str	r3, [r4, #0]
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	6923      	ldr	r3, [r4, #16]
 8001748:	b94b      	cbnz	r3, 800175e <__swsetup_r+0x7a>
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001754:	d003      	beq.n	800175e <__swsetup_r+0x7a>
 8001756:	4621      	mov	r1, r4
 8001758:	4628      	mov	r0, r5
 800175a:	f000 f84f 	bl	80017fc <__smakebuf_r>
 800175e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001762:	f013 0201 	ands.w	r2, r3, #1
 8001766:	d00a      	beq.n	800177e <__swsetup_r+0x9a>
 8001768:	2200      	movs	r2, #0
 800176a:	60a2      	str	r2, [r4, #8]
 800176c:	6962      	ldr	r2, [r4, #20]
 800176e:	4252      	negs	r2, r2
 8001770:	61a2      	str	r2, [r4, #24]
 8001772:	6922      	ldr	r2, [r4, #16]
 8001774:	b942      	cbnz	r2, 8001788 <__swsetup_r+0xa4>
 8001776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800177a:	d1c5      	bne.n	8001708 <__swsetup_r+0x24>
 800177c:	bd38      	pop	{r3, r4, r5, pc}
 800177e:	0799      	lsls	r1, r3, #30
 8001780:	bf58      	it	pl
 8001782:	6962      	ldrpl	r2, [r4, #20]
 8001784:	60a2      	str	r2, [r4, #8]
 8001786:	e7f4      	b.n	8001772 <__swsetup_r+0x8e>
 8001788:	2000      	movs	r0, #0
 800178a:	e7f7      	b.n	800177c <__swsetup_r+0x98>
 800178c:	2000000c 	.word	0x2000000c

08001790 <_sbrk_r>:
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4d06      	ldr	r5, [pc, #24]	@ (80017ac <_sbrk_r+0x1c>)
 8001794:	2300      	movs	r3, #0
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	602b      	str	r3, [r5, #0]
 800179c:	f7ff f842 	bl	8000824 <_sbrk>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d102      	bne.n	80017aa <_sbrk_r+0x1a>
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	b103      	cbz	r3, 80017aa <_sbrk_r+0x1a>
 80017a8:	6023      	str	r3, [r4, #0]
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	200014a4 	.word	0x200014a4

080017b0 <__swhatbuf_r>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	460c      	mov	r4, r1
 80017b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017b8:	2900      	cmp	r1, #0
 80017ba:	b096      	sub	sp, #88	@ 0x58
 80017bc:	4615      	mov	r5, r2
 80017be:	461e      	mov	r6, r3
 80017c0:	da0d      	bge.n	80017de <__swhatbuf_r+0x2e>
 80017c2:	89a3      	ldrh	r3, [r4, #12]
 80017c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	bf14      	ite	ne
 80017ce:	2340      	movne	r3, #64	@ 0x40
 80017d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80017d4:	2000      	movs	r0, #0
 80017d6:	6031      	str	r1, [r6, #0]
 80017d8:	602b      	str	r3, [r5, #0]
 80017da:	b016      	add	sp, #88	@ 0x58
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	466a      	mov	r2, sp
 80017e0:	f000 f848 	bl	8001874 <_fstat_r>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	dbec      	blt.n	80017c2 <__swhatbuf_r+0x12>
 80017e8:	9901      	ldr	r1, [sp, #4]
 80017ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80017ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80017f2:	4259      	negs	r1, r3
 80017f4:	4159      	adcs	r1, r3
 80017f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fa:	e7eb      	b.n	80017d4 <__swhatbuf_r+0x24>

080017fc <__smakebuf_r>:
 80017fc:	898b      	ldrh	r3, [r1, #12]
 80017fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001800:	079d      	lsls	r5, r3, #30
 8001802:	4606      	mov	r6, r0
 8001804:	460c      	mov	r4, r1
 8001806:	d507      	bpl.n	8001818 <__smakebuf_r+0x1c>
 8001808:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800180c:	6023      	str	r3, [r4, #0]
 800180e:	6123      	str	r3, [r4, #16]
 8001810:	2301      	movs	r3, #1
 8001812:	6163      	str	r3, [r4, #20]
 8001814:	b003      	add	sp, #12
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001818:	ab01      	add	r3, sp, #4
 800181a:	466a      	mov	r2, sp
 800181c:	f7ff ffc8 	bl	80017b0 <__swhatbuf_r>
 8001820:	9f00      	ldr	r7, [sp, #0]
 8001822:	4605      	mov	r5, r0
 8001824:	4639      	mov	r1, r7
 8001826:	4630      	mov	r0, r6
 8001828:	f7ff fb16 	bl	8000e58 <_malloc_r>
 800182c:	b948      	cbnz	r0, 8001842 <__smakebuf_r+0x46>
 800182e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001832:	059a      	lsls	r2, r3, #22
 8001834:	d4ee      	bmi.n	8001814 <__smakebuf_r+0x18>
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	81a3      	strh	r3, [r4, #12]
 8001840:	e7e2      	b.n	8001808 <__smakebuf_r+0xc>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	6020      	str	r0, [r4, #0]
 8001846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184a:	81a3      	strh	r3, [r4, #12]
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001852:	b15b      	cbz	r3, 800186c <__smakebuf_r+0x70>
 8001854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001858:	4630      	mov	r0, r6
 800185a:	f000 f81d 	bl	8001898 <_isatty_r>
 800185e:	b128      	cbz	r0, 800186c <__smakebuf_r+0x70>
 8001860:	89a3      	ldrh	r3, [r4, #12]
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	81a3      	strh	r3, [r4, #12]
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	431d      	orrs	r5, r3
 8001870:	81a5      	strh	r5, [r4, #12]
 8001872:	e7cf      	b.n	8001814 <__smakebuf_r+0x18>

08001874 <_fstat_r>:
 8001874:	b538      	push	{r3, r4, r5, lr}
 8001876:	4d07      	ldr	r5, [pc, #28]	@ (8001894 <_fstat_r+0x20>)
 8001878:	2300      	movs	r3, #0
 800187a:	4604      	mov	r4, r0
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	602b      	str	r3, [r5, #0]
 8001882:	f7fe ffa6 	bl	80007d2 <_fstat>
 8001886:	1c43      	adds	r3, r0, #1
 8001888:	d102      	bne.n	8001890 <_fstat_r+0x1c>
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	b103      	cbz	r3, 8001890 <_fstat_r+0x1c>
 800188e:	6023      	str	r3, [r4, #0]
 8001890:	bd38      	pop	{r3, r4, r5, pc}
 8001892:	bf00      	nop
 8001894:	200014a4 	.word	0x200014a4

08001898 <_isatty_r>:
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	4d06      	ldr	r5, [pc, #24]	@ (80018b4 <_isatty_r+0x1c>)
 800189c:	2300      	movs	r3, #0
 800189e:	4604      	mov	r4, r0
 80018a0:	4608      	mov	r0, r1
 80018a2:	602b      	str	r3, [r5, #0]
 80018a4:	f7fe ffa5 	bl	80007f2 <_isatty>
 80018a8:	1c43      	adds	r3, r0, #1
 80018aa:	d102      	bne.n	80018b2 <_isatty_r+0x1a>
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	b103      	cbz	r3, 80018b2 <_isatty_r+0x1a>
 80018b0:	6023      	str	r3, [r4, #0]
 80018b2:	bd38      	pop	{r3, r4, r5, pc}
 80018b4:	200014a4 	.word	0x200014a4

080018b8 <_init>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	bf00      	nop
 80018bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018be:	bc08      	pop	{r3}
 80018c0:	469e      	mov	lr, r3
 80018c2:	4770      	bx	lr

080018c4 <_fini>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	bf00      	nop
 80018c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ca:	bc08      	pop	{r3}
 80018cc:	469e      	mov	lr, r3
 80018ce:	4770      	bx	lr
