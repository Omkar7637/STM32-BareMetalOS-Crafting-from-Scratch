
V1_4_PeriodicScheduler_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007b4  080007bc  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007b4  080007b4  000017bc  2**0
                  CONTENTS
  4 .ARM          00000000  080007b4  080007b4  000017bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007b4  080007bc  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007b4  080007b4  000017b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007b8  080007b8  000017b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000000  080007bc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001310  080007bc  00002310  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e5f  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c6  00000000  00000000  00002645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00002b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000cc  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fa5  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001322  00000000  00000000  00003ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f393  00000000  00000000  00004fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009435e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000032c  00000000  00000000  000943a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000946d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800079c 	.word	0x0800079c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800079c 	.word	0x0800079c

08000204 <task3>:
void valve_close(void);



void task3(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	pTask1_Profiler++;
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <task3+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a03      	ldr	r2, [pc, #12]	@ (800021c <task3+0x18>)
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000028 	.word	0x20000028

08000220 <task0>:

void task0(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 8000224:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <task0+0x18>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	4a03      	ldr	r2, [pc, #12]	@ (8000238 <task0+0x18>)
 800022c:	6013      	str	r3, [r2, #0]
		osThreadYield();
 800022e:	f000 f9c9 	bl	80005c4 <osThreadYield>
		Task0_Profiler++;
 8000232:	bf00      	nop
 8000234:	e7f6      	b.n	8000224 <task0+0x4>
 8000236:	bf00      	nop
 8000238:	2000001c 	.word	0x2000001c

0800023c <task1>:
	}
}


void task1(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 8000240:	4b02      	ldr	r3, [pc, #8]	@ (800024c <task1+0x10>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	4a01      	ldr	r2, [pc, #4]	@ (800024c <task1+0x10>)
 8000248:	6013      	str	r3, [r2, #0]
 800024a:	e7f9      	b.n	8000240 <task1+0x4>
 800024c:	20000020 	.word	0x20000020

08000250 <task2>:
	}
}

void task2(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 8000254:	4b02      	ldr	r3, [pc, #8]	@ (8000260 <task2+0x10>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a01      	ldr	r2, [pc, #4]	@ (8000260 <task2+0x10>)
 800025c:	6013      	str	r3, [r2, #0]
 800025e:	e7f9      	b.n	8000254 <task2+0x4>
 8000260:	20000024 	.word	0x20000024

08000264 <main>:
	}
}

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0


	uart_tx_init();
 8000268:	f000 f9da 	bl	8000620 <uart_tx_init>

	/*Initialize Kernel*/
	osKernelInit();
 800026c:	f000 f946 	bl	80004fc <osKernelInit>
	/*Add Threads*/
	osKernelAddThreads(&task0,&task1,&task2);
 8000270:	4a05      	ldr	r2, [pc, #20]	@ (8000288 <main+0x24>)
 8000272:	4906      	ldr	r1, [pc, #24]	@ (800028c <main+0x28>)
 8000274:	4806      	ldr	r0, [pc, #24]	@ (8000290 <main+0x2c>)
 8000276:	f000 f905 	bl	8000484 <osKernelAddThreads>

	/*Set RoundRobin time quanta*/
	osKernelLaunch(QUANTA);
 800027a:	200a      	movs	r0, #10
 800027c:	f000 f94a 	bl	8000514 <osKernelLaunch>
 8000280:	2300      	movs	r3, #0


}
 8000282:	4618      	mov	r0, r3
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	08000251 	.word	0x08000251
 800028c:	0800023d 	.word	0x0800023d
 8000290:	08000221 	.word	0x08000221

08000294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	db0a      	blt.n	80002be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	490c      	ldr	r1, [pc, #48]	@ (80002e0 <__NVIC_SetPriority+0x4c>)
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002bc:	e00a      	b.n	80002d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4908      	ldr	r1, [pc, #32]	@ (80002e4 <__NVIC_SetPriority+0x50>)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	3b04      	subs	r3, #4
 80002cc:	0112      	lsls	r2, r2, #4
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	440b      	add	r3, r1
 80002d2:	761a      	strb	r2, [r3, #24]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <osKernelStackInit>:
/*Each thread will have stacksize of 100 i.e. 400bytes*/
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; /*Stack Pointer*/
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80002fe:	4a5f      	ldr	r2, [pc, #380]	@ (800047c <osKernelStackInit+0x194>)
 8000300:	441a      	add	r2, r3
 8000302:	495f      	ldr	r1, [pc, #380]	@ (8000480 <osKernelStackInit+0x198>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	/*Set bit21 (T-bit) in PSR to 1, to operate in
	 * Thumb mode*/
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24); /*PSR*/
 800030a:	4a5c      	ldr	r2, [pc, #368]	@ (800047c <osKernelStackInit+0x194>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000312:	fb01 f303 	mul.w	r3, r1, r3
 8000316:	4413      	add	r3, r2
 8000318:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 800031c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000320:	601a      	str	r2, [r3, #0]


  /**@Note : Block below is optional, for debugging purpose only*/
  /**Dummy stack content*/
	TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    /*R14 i.e LR*/
 8000322:	4a56      	ldr	r2, [pc, #344]	@ (800047c <osKernelStackInit+0x194>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800032a:	fb01 f303 	mul.w	r3, r1, r3
 800032e:	4413      	add	r3, r2
 8000330:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000334:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000338:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    /*R12*/
 800033a:	4a50      	ldr	r2, [pc, #320]	@ (800047c <osKernelStackInit+0x194>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000342:	fb01 f303 	mul.w	r3, r1, r3
 8000346:	4413      	add	r3, r2
 8000348:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800034c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000350:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    /*R3*/
 8000352:	4a4a      	ldr	r2, [pc, #296]	@ (800047c <osKernelStackInit+0x194>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800035a:	fb01 f303 	mul.w	r3, r1, r3
 800035e:	4413      	add	r3, r2
 8000360:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000364:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000368:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    /*R2*/
 800036a:	4a44      	ldr	r2, [pc, #272]	@ (800047c <osKernelStackInit+0x194>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000372:	fb01 f303 	mul.w	r3, r1, r3
 8000376:	4413      	add	r3, r2
 8000378:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 800037c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000380:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    /*R1*/
 8000382:	4a3e      	ldr	r2, [pc, #248]	@ (800047c <osKernelStackInit+0x194>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800038a:	fb01 f303 	mul.w	r3, r1, r3
 800038e:	4413      	add	r3, r2
 8000390:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000394:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000398:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    /*R0*/
 800039a:	4a38      	ldr	r2, [pc, #224]	@ (800047c <osKernelStackInit+0x194>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003a2:	fb01 f303 	mul.w	r3, r1, r3
 80003a6:	4413      	add	r3, r2
 80003a8:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80003ac:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003b0:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    /*R11*/
 80003b2:	4a32      	ldr	r2, [pc, #200]	@ (800047c <osKernelStackInit+0x194>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ba:	fb01 f303 	mul.w	r3, r1, r3
 80003be:	4413      	add	r3, r2
 80003c0:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80003c4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003c8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   /*R10*/
 80003ca:	4a2c      	ldr	r2, [pc, #176]	@ (800047c <osKernelStackInit+0x194>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003d2:	fb01 f303 	mul.w	r3, r1, r3
 80003d6:	4413      	add	r3, r2
 80003d8:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80003dc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003e0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   /*R9*/
 80003e2:	4a26      	ldr	r2, [pc, #152]	@ (800047c <osKernelStackInit+0x194>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ea:	fb01 f303 	mul.w	r3, r1, r3
 80003ee:	4413      	add	r3, r2
 80003f0:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80003f4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003f8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   /*R8*/
 80003fa:	4a20      	ldr	r2, [pc, #128]	@ (800047c <osKernelStackInit+0x194>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000402:	fb01 f303 	mul.w	r3, r1, r3
 8000406:	4413      	add	r3, r2
 8000408:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800040c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000410:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   /*R7*/
 8000412:	4a1a      	ldr	r2, [pc, #104]	@ (800047c <osKernelStackInit+0x194>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800041a:	fb01 f303 	mul.w	r3, r1, r3
 800041e:	4413      	add	r3, r2
 8000420:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000424:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000428:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   /*R6*/
 800042a:	4a14      	ldr	r2, [pc, #80]	@ (800047c <osKernelStackInit+0x194>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000432:	fb01 f303 	mul.w	r3, r1, r3
 8000436:	4413      	add	r3, r2
 8000438:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 800043c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000440:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   /*R5*/
 8000442:	4a0e      	ldr	r2, [pc, #56]	@ (800047c <osKernelStackInit+0x194>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800044a:	fb01 f303 	mul.w	r3, r1, r3
 800044e:	4413      	add	r3, r2
 8000450:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000454:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000458:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   /*R4*/
 800045a:	4a08      	ldr	r2, [pc, #32]	@ (800047c <osKernelStackInit+0x194>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000462:	fb01 f303 	mul.w	r3, r1, r3
 8000466:	4413      	add	r3, r2
 8000468:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800046c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	20000050 	.word	0x20000050
 8000480:	20000034 	.word	0x20000034

08000484 <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();
	tcbs[0].nextPt =  &tcbs[1];
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <osKernelAddThreads+0x64>)
 8000496:	4a15      	ldr	r2, [pc, #84]	@ (80004ec <osKernelAddThreads+0x68>)
 8000498:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt =  &tcbs[2];
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <osKernelAddThreads+0x64>)
 800049c:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <osKernelAddThreads+0x6c>)
 800049e:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt =  &tcbs[0];
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <osKernelAddThreads+0x64>)
 80004a2:	4a11      	ldr	r2, [pc, #68]	@ (80004e8 <osKernelAddThreads+0x64>)
 80004a4:	615a      	str	r2, [r3, #20]

	/*Initial stack for thread0*/
	osKernelStackInit(0);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff ff1e 	bl	80002e8 <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[0][STACKSIZE - 2] =  (int32_t)(task0);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	4a11      	ldr	r2, [pc, #68]	@ (80004f4 <osKernelAddThreads+0x70>)
 80004b0:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	/*Initial stack for thread1*/
	osKernelStackInit(1);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f7ff ff17 	bl	80002e8 <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[1][STACKSIZE - 2] =  (int32_t)(task1);
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4a0d      	ldr	r2, [pc, #52]	@ (80004f4 <osKernelAddThreads+0x70>)
 80004be:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78


	/*Initial stack for thread2*/
	osKernelStackInit(2);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f7ff ff10 	bl	80002e8 <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[2][STACKSIZE - 2] =  (int32_t)(task2);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a0a      	ldr	r2, [pc, #40]	@ (80004f4 <osKernelAddThreads+0x70>)
 80004cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80004d0:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	/*Start from thread0*/
	currentPt  = &tcbs[0];
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <osKernelAddThreads+0x74>)
 80004d6:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <osKernelAddThreads+0x64>)
 80004d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004da:	b662      	cpsie	i
}
 80004dc:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

	return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000034 	.word	0x20000034
 80004ec:	2000003c 	.word	0x2000003c
 80004f0:	20000044 	.word	0x20000044
 80004f4:	20000050 	.word	0x20000050
 80004f8:	2000004c 	.word	0x2000004c

080004fc <osKernelInit>:


void osKernelInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER  = (BUS_FREQ/1000);
 8000500:	4b03      	ldr	r3, [pc, #12]	@ (8000510 <osKernelInit+0x14>)
 8000502:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	20000030 	.word	0x20000030

08000514 <osKernelLaunch>:


void osKernelLaunch(uint32_t quanta)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	/*Reset systick*/
	SysTick->CTRL = SYSTICK_RST;
 800051c:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <osKernelLaunch+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <osKernelLaunch+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]

	/*Load quanta*/
	SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <osKernelLaunch+0x50>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <osKernelLaunch+0x4c>)
 8000534:	3b01      	subs	r3, #1
 8000536:	6053      	str	r3, [r2, #4]

	/*Set systick to low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
 8000538:	210f      	movs	r1, #15
 800053a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800053e:	f7ff fea9 	bl	8000294 <__NVIC_SetPriority>

	/*Enable systick, select internal clock*/
	SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <osKernelLaunch+0x4c>)
 8000544:	2205      	movs	r2, #5
 8000546:	601a      	str	r2, [r3, #0]

	/*Enable systick interrupt*/
	SysTick->CTRL  |= CTRL_TICKINT;
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <osKernelLaunch+0x4c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <osKernelLaunch+0x4c>)
 800054e:	f043 0302 	orr.w	r3, r3, #2
 8000552:	6013      	str	r3, [r2, #0]

	/*Launch scheduler*/
	osSchedulerLaunch();
 8000554:	f000 f81e 	bl	8000594 <osSchedulerLaunch>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	e000e010 	.word	0xe000e010
 8000564:	20000030 	.word	0x20000030

08000568 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*SUSPEND CURRENT THREAD*/

	/*Disable global interrupts*/
	__asm("CPSID	I");
 8000568:	b672      	cpsid	i

	/*Save r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("PUSH  {R4-R11}");
 800056a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Load address of currentPt into r0*/
	__asm("LDR R0, =currentPt");
 800056e:	4808      	ldr	r0, [pc, #32]	@ (8000590 <SysTick_Handler+0x28>)

	/*Load r1 from address equals r0, i.e. r1 =currentPt*/
	__asm("LDR R1,[R0]");
 8000570:	6801      	ldr	r1, [r0, #0]

	/*Store Cortex-M SP at address equals r1, i.e Save SP into tcb */
	__asm("STR SP,[R1]");
 8000572:	f8c1 d000 	str.w	sp, [r1]

    /*CHOOSE NEXT THREAD*/

	 __asm("PUSH	{R0,LR}");
 8000576:	b501      	push	{r0, lr}
	 __asm("BL		osSchedulerRoundRobin");
 8000578:	f000 f836 	bl	80005e8 <osSchedulerRoundRobin>
	 __asm("POP    {R0,LR}");
 800057c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

     /*R1 =  currentPt i.e. New Thread*/
	 __asm("LDR		R1,[R0]");
 8000580:	6801      	ldr	r1, [r0, #0]
	/*SP  = currentPt->StackPt*/
	 __asm("LDR		SP,[R1]");
 8000582:	f8d1 d000 	ldr.w	sp, [r1]
	/*Restore r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("POP {R4-R11}");
 8000586:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 800058a:	b662      	cpsie	i

	/*Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr */
	__asm("BX	LR");
 800058c:	4770      	bx	lr



}
 800058e:	bf00      	nop
 8000590:	2000004c 	.word	0x2000004c

08000594 <osSchedulerLaunch>:


void osSchedulerLaunch(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	/*Load address of currentPt into R0*/
	__asm("LDR R0,=currentPt");
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <osSchedulerLaunch+0x2c>)

	/*Load r2 from address equals r0,i.e r2 =currentPt*/
	__asm("LDR R2,[r0]");
 800059a:	6802      	ldr	r2, [r0, #0]

	/*Load Cortex-M SP from address equals R2,i.e. SP = currentPt->stackPt*/
	__asm("LDR  SP,[R2]");
 800059c:	f8d2 d000 	ldr.w	sp, [r2]

	/*Restore r4,r5,r6,r7,r8,r9,r10,r11*/
	__asm("POP {R4-R11}");
 80005a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Restore r12*/
	__asm("POP {R12}");
 80005a4:	f85d cb04 	ldr.w	ip, [sp], #4

	/*Restore r0,r1,r2,r3*/
	__asm("POP	{R0-R3}");
 80005a8:	bc0f      	pop	{r0, r1, r2, r3}

	/*Skip LR */
	__asm("ADD  SP,SP,#4");
 80005aa:	b001      	add	sp, #4

	/*Create a new start location by popping LR*/
	__asm("POP {LR}");
 80005ac:	f85d eb04 	ldr.w	lr, [sp], #4

	/*Skip PSR by adding 4 to SP*/
	__asm("ADD  SP,SP,#4");
 80005b0:	b001      	add	sp, #4

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 80005b2:	b662      	cpsie	i

	/*Return from exception*/
	__asm("BX	LR");
 80005b4:	4770      	bx	lr
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	0000      	.short	0x0000
 80005c0:	2000004c 	.word	0x2000004c

080005c4 <osThreadYield>:

void osThreadYield(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	/*Clear Systick Current Value register*/
	SysTick->VAL = 0;
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <osThreadYield+0x1c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]

	/*Trigger SysTick*/
	INTCTRL = PENDSTSET;
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <osThreadYield+0x20>)
 80005d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e010 	.word	0xe000e010
 80005e4:	e000ed04 	.word	0xe000ed04

080005e8 <osSchedulerRoundRobin>:


void osSchedulerRoundRobin(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	if((++period_tick)  == PERIOD)
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <osSchedulerRoundRobin+0x30>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <osSchedulerRoundRobin+0x30>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <osSchedulerRoundRobin+0x30>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b64      	cmp	r3, #100	@ 0x64
 80005fc:	d104      	bne.n	8000608 <osSchedulerRoundRobin+0x20>
	{
		(*task3)();
 80005fe:	f7ff fe01 	bl	8000204 <task3>

		period_tick = 0;
 8000602:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <osSchedulerRoundRobin+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	}

	currentPt = currentPt->nextPt;
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <osSchedulerRoundRobin+0x34>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a03      	ldr	r2, [pc, #12]	@ (800061c <osSchedulerRoundRobin+0x34>)
 8000610:	6013      	str	r3, [r2, #0]
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000002c 	.word	0x2000002c
 800061c:	2000004c 	.word	0x2000004c

08000620 <uart_tx_init>:
	uart_write(ch);
	return ch;
}

void uart_tx_init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	 RCC->AHB1ENR  |= GPIOAEN;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <uart_tx_init+0x84>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	4a1e      	ldr	r2, [pc, #120]	@ (80006a4 <uart_tx_init+0x84>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	 GPIOA->MODER &=~(1U<<4);
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <uart_tx_init+0x88>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <uart_tx_init+0x88>)
 8000636:	f023 0310 	bic.w	r3, r3, #16
 800063a:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=(1U<<5);
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <uart_tx_init+0x88>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a19      	ldr	r2, [pc, #100]	@ (80006a8 <uart_tx_init+0x88>)
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7 (UART2_TX)*/
	 GPIOA->AFR[0] |=(1U<<8);
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <uart_tx_init+0x88>)
 800064a:	6a1b      	ldr	r3, [r3, #32]
 800064c:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <uart_tx_init+0x88>)
 800064e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000652:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<9);
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <uart_tx_init+0x88>)
 8000656:	6a1b      	ldr	r3, [r3, #32]
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <uart_tx_init+0x88>)
 800065a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800065e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<10);
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <uart_tx_init+0x88>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	4a10      	ldr	r2, [pc, #64]	@ (80006a8 <uart_tx_init+0x88>)
 8000666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800066a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(1U<<11);
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <uart_tx_init+0x88>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <uart_tx_init+0x88>)
 8000672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000676:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART*/
	 RCC->APB1ENR |= UART2EN;
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <uart_tx_init+0x84>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <uart_tx_init+0x84>)
 800067e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	 uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 8000684:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <uart_tx_init+0x8c>)
 800068a:	f000 f813 	bl	80006b4 <uart_set_baudrate>

	/*Configure transfer direction*/
	 USART2->CR1 = CR1_TE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <uart_tx_init+0x90>)
 8000690:	2208      	movs	r2, #8
 8000692:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	 USART2->CR1 |= CR1_UE;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <uart_tx_init+0x90>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <uart_tx_init+0x90>)
 800069a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000
 80006ac:	00f42400 	.word	0x00f42400
 80006b0:	40004400 	.word	0x40004400

080006b4 <uart_set_baudrate>:
	/*Write to transmit data register*/
	 USART2->DR =  (ch & 0XFF);
}

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80006be:	6839      	ldr	r1, [r7, #0]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f80b 	bl	80006dc <compute_uart_bd>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <uart_set_baudrate+0x24>)
 80006cc:	609a      	str	r2, [r3, #8]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400

080006dc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	085a      	lsrs	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	441a      	add	r2, r3
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f4:	b29b      	uxth	r3, r3
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	@ (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	@ (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	@ (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 f811 	bl	8000754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fd97 	bl	8000264 <main>

08000736 <LoopForever>:

LoopForever:
  b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000744:	080007bc 	.word	0x080007bc
  ldr r2, =_sbss
 8000748:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800074c:	20001310 	.word	0x20001310

08000750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <__libc_init_array>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	4d0d      	ldr	r5, [pc, #52]	@ (800078c <__libc_init_array+0x38>)
 8000758:	4c0d      	ldr	r4, [pc, #52]	@ (8000790 <__libc_init_array+0x3c>)
 800075a:	1b64      	subs	r4, r4, r5
 800075c:	10a4      	asrs	r4, r4, #2
 800075e:	2600      	movs	r6, #0
 8000760:	42a6      	cmp	r6, r4
 8000762:	d109      	bne.n	8000778 <__libc_init_array+0x24>
 8000764:	4d0b      	ldr	r5, [pc, #44]	@ (8000794 <__libc_init_array+0x40>)
 8000766:	4c0c      	ldr	r4, [pc, #48]	@ (8000798 <__libc_init_array+0x44>)
 8000768:	f000 f818 	bl	800079c <_init>
 800076c:	1b64      	subs	r4, r4, r5
 800076e:	10a4      	asrs	r4, r4, #2
 8000770:	2600      	movs	r6, #0
 8000772:	42a6      	cmp	r6, r4
 8000774:	d105      	bne.n	8000782 <__libc_init_array+0x2e>
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f855 3b04 	ldr.w	r3, [r5], #4
 800077c:	4798      	blx	r3
 800077e:	3601      	adds	r6, #1
 8000780:	e7ee      	b.n	8000760 <__libc_init_array+0xc>
 8000782:	f855 3b04 	ldr.w	r3, [r5], #4
 8000786:	4798      	blx	r3
 8000788:	3601      	adds	r6, #1
 800078a:	e7f2      	b.n	8000772 <__libc_init_array+0x1e>
 800078c:	080007b4 	.word	0x080007b4
 8000790:	080007b4 	.word	0x080007b4
 8000794:	080007b4 	.word	0x080007b4
 8000798:	080007b8 	.word	0x080007b8

0800079c <_init>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr

080007a8 <_fini>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	bf00      	nop
 80007ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ae:	bc08      	pop	{r3}
 80007b0:	469e      	mov	lr, r3
 80007b2:	4770      	bx	lr
