
V1_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001930  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001b00  08001b00  00002b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b94  08001b94  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001b94  08001b94  00002b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b9c  08001b9c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b9c  08001b9c  00002b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ba0  08001ba0  00002ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001ba4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08001c00  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08001c00  00003280  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000215c  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e9  00000000  00000000  000051e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00005ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c0  00000000  00000000  00005d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad73  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000287f  00000000  00000000  00020c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f1f  00000000  00000000  00023502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fe4  00000000  00000000  000b4464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000b5448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001ae8 	.word	0x08001ae8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001ae8 	.word	0x08001ae8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <led_init>:

#define GPIOAEN			(1U<<0)//  0b 0000 0000 0000 0000 0000 0000 0000 0001
#define LED_PIN			(1U<<5)

void led_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	//Example of 'friendly' programming
	// Initial state =    0b 0000 0000 0000 0000 1100 0000 0000 0000
	//Set bit0 = (1u<<0)= 0b 0000 0000 0000 0000 0000 0000 0000 0001
	//final state =  Initial state OR Set bit0  =  0b 0000 0000 0000 0000 1100 0000 0000 0001

	RCC->AHB1ENR  |= GPIOAEN;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <led_init+0x30>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a09      	ldr	r2, [pc, #36]	@ (80002e0 <led_init+0x30>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30




	/*Set led pin as output pin*/
	GPIOA->MODER |=(1U<<10);
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <led_init+0x34>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <led_init+0x34>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <led_init+0x34>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <led_init+0x34>)
 80002d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002d6:	6013      	str	r3, [r2, #0]

}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000

080002e8 <led_on>:


void led_on(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	/*Set led pin HIGH (PA5)*/
	GPIOA->ODR |= LED_PIN;
 80002ec:	4b04      	ldr	r3, [pc, #16]	@ (8000300 <led_on+0x18>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a03      	ldr	r2, [pc, #12]	@ (8000300 <led_on+0x18>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6153      	str	r3, [r2, #20]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40020000 	.word	0x40020000

08000304 <led_off>:


void led_off(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	/*Set led pin LOW (PA5)*/
	GPIOA->ODR &= ~LED_PIN;
 8000308:	4b04      	ldr	r3, [pc, #16]	@ (800031c <led_off+0x18>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a03      	ldr	r2, [pc, #12]	@ (800031c <led_off+0x18>)
 800030e:	f023 0320 	bic.w	r3, r3, #32
 8000312:	6153      	str	r3, [r2, #20]

}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40020000 	.word	0x40020000

08000320 <task3>:
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task3(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    pTask1_Profiler++;
 8000324:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <task3+0x18>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	4a03      	ldr	r2, [pc, #12]	@ (8000338 <task3+0x18>)
 800032c:	6013      	str	r3, [r2, #0]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000084 	.word	0x20000084

0800033c <task0>:

void task0(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
    while (1)
    {
        Task0_Profiler++;
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <task0+0x48>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3301      	adds	r3, #1
 8000348:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <task0+0x48>)
 800034a:	6013      	str	r3, [r2, #0]
        led_init();
 800034c:	f7ff ffb0 	bl	80002b0 <led_init>
        led_on();
 8000350:	f7ff ffca 	bl	80002e8 <led_on>
        for (int i = 0; i < 90000; i++) {}
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e002      	b.n	8000360 <task0+0x24>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <task0+0x4c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	ddf8      	ble.n	800035a <task0+0x1e>
        led_off();
 8000368:	f7ff ffcc 	bl	8000304 <led_off>
        for (int i = 0; i < 90000; i++) {}
 800036c:	2300      	movs	r3, #0
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	e002      	b.n	8000378 <task0+0x3c>
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	4a03      	ldr	r2, [pc, #12]	@ (8000388 <task0+0x4c>)
 800037c:	4293      	cmp	r3, r2
 800037e:	ddf8      	ble.n	8000372 <task0+0x36>
        Task0_Profiler++;
 8000380:	e7df      	b.n	8000342 <task0+0x6>
 8000382:	bf00      	nop
 8000384:	20000078 	.word	0x20000078
 8000388:	00015f8f 	.word	0x00015f8f

0800038c <task1>:
    }
}

void task1(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    while (1)
    {
        osSemaphoreWait(&semaphore1);
 8000390:	4807      	ldr	r0, [pc, #28]	@ (80003b0 <task1+0x24>)
 8000392:	f000 fb00 	bl	8000996 <osSemaphoreWait>
        motor_run();
 8000396:	f000 f8b9 	bl	800050c <motor_run>
        Task1_Profiler++;
 800039a:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <task1+0x28>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	4a04      	ldr	r2, [pc, #16]	@ (80003b4 <task1+0x28>)
 80003a2:	6013      	str	r3, [r2, #0]
        osSemaphoreSet(&semaphore2);
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <task1+0x2c>)
 80003a6:	f000 fae4 	bl	8000972 <osSemaphoreSet>
        osSemaphoreWait(&semaphore1);
 80003aa:	bf00      	nop
 80003ac:	e7f0      	b.n	8000390 <task1+0x4>
 80003ae:	bf00      	nop
 80003b0:	2000009c 	.word	0x2000009c
 80003b4:	2000007c 	.word	0x2000007c
 80003b8:	200000a0 	.word	0x200000a0

080003bc <task2>:
    }
}

void task2(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    while (1)
    {
        osSemaphoreWait(&semaphore2);
 80003c0:	4807      	ldr	r0, [pc, #28]	@ (80003e0 <task2+0x24>)
 80003c2:	f000 fae8 	bl	8000996 <osSemaphoreWait>
        valve_open();
 80003c6:	f000 f8ab 	bl	8000520 <valve_open>
        Task2_Profiler++;
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <task2+0x28>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <task2+0x28>)
 80003d2:	6013      	str	r3, [r2, #0]
        osSemaphoreSet(&semaphore1);
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <task2+0x2c>)
 80003d6:	f000 facc 	bl	8000972 <osSemaphoreSet>
        osSemaphoreWait(&semaphore2);
 80003da:	bf00      	nop
 80003dc:	e7f0      	b.n	80003c0 <task2+0x4>
 80003de:	bf00      	nop
 80003e0:	200000a0 	.word	0x200000a0
 80003e4:	20000080 	.word	0x20000080
 80003e8:	2000009c 	.word	0x2000009c

080003ec <task4>:
    }
}

void task4(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	while(1){
    Task4_Profiler++;
 80003f0:	4b02      	ldr	r3, [pc, #8]	@ (80003fc <task4+0x10>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a01      	ldr	r2, [pc, #4]	@ (80003fc <task4+0x10>)
 80003f8:	6013      	str	r3, [r2, #0]
 80003fa:	e7f9      	b.n	80003f0 <task4+0x4>
 80003fc:	2000008c 	.word	0x2000008c

08000400 <task5>:
}}

void task5(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	while(1){
    Task5_Profiler++;
 8000404:	4b02      	ldr	r3, [pc, #8]	@ (8000410 <task5+0x10>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	3301      	adds	r3, #1
 800040a:	4a01      	ldr	r2, [pc, #4]	@ (8000410 <task5+0x10>)
 800040c:	6013      	str	r3, [r2, #0]
 800040e:	e7f9      	b.n	8000404 <task5+0x4>
 8000410:	20000090 	.word	0x20000090

08000414 <task6>:
}}

void task6(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	while(1){
    Task6_Profiler++;
 8000418:	4b02      	ldr	r3, [pc, #8]	@ (8000424 <task6+0x10>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	4a01      	ldr	r2, [pc, #4]	@ (8000424 <task6+0x10>)
 8000420:	6013      	str	r3, [r2, #0]
 8000422:	e7f9      	b.n	8000418 <task6+0x4>
 8000424:	20000094 	.word	0x20000094

08000428 <task7>:
}}

void task7(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
    while (1)
    {
        // Task4 functionality
        Task7_Profiler++;
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <task7+0x28>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	4a06      	ldr	r2, [pc, #24]	@ (8000450 <task7+0x28>)
 8000436:	6013      	str	r3, [r2, #0]
        // Example functionality: toggle an LED
        // led_toggle();
        // Delay to simulate task workload
        for (int i = 0; i < 90000; i++) {}
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	e002      	b.n	8000444 <task7+0x1c>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a03      	ldr	r2, [pc, #12]	@ (8000454 <task7+0x2c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	ddf8      	ble.n	800043e <task7+0x16>
        Task7_Profiler++;
 800044c:	e7ef      	b.n	800042e <task7+0x6>
 800044e:	bf00      	nop
 8000450:	20000098 	.word	0x20000098
 8000454:	00015f8f 	.word	0x00015f8f

08000458 <initializeSemaphores>:
    }
}

void initializeSemaphores(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    osSemaphoreInit(&semaphore1, 1);
 800045c:	2101      	movs	r1, #1
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <initializeSemaphores+0x20>)
 8000460:	f000 fa7a 	bl	8000958 <osSemaphoreInit>
    osSemaphoreInit(&semaphore2, 0);
 8000464:	2100      	movs	r1, #0
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <initializeSemaphores+0x24>)
 8000468:	f000 fa76 	bl	8000958 <osSemaphoreInit>
    osSemaphoreInit(&semaphore4, 1); // Initialize semaphore4 with a value of 1
 800046c:	2101      	movs	r1, #1
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <initializeSemaphores+0x28>)
 8000470:	f000 fa72 	bl	8000958 <osSemaphoreInit>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	2000009c 	.word	0x2000009c
 800047c:	200000a0 	.word	0x200000a0
 8000480:	200000a4 	.word	0x200000a4

08000484 <main>:

int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
    /* Initialize uart */
    uart_tx_init();
 8000488:	f000 fb4c 	bl	8000b24 <uart_tx_init>

    /* Initialize hardware timer */
    tim2_1hz_interrupt_init();
 800048c:	f000 fa3a 	bl	8000904 <tim2_1hz_interrupt_init>

    /* Initialize semaphores */
    initializeSemaphores();
 8000490:	f7ff ffe2 	bl	8000458 <initializeSemaphores>

    /* Initialize Kernel */
    osKernelInit();
 8000494:	f000 f9b6 	bl	8000804 <osKernelInit>

    /* Add Threads */
    osKernelAddThreads(&task0, &task1, &task2);
 8000498:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <main+0x40>)
 800049a:	490b      	ldr	r1, [pc, #44]	@ (80004c8 <main+0x44>)
 800049c:	480b      	ldr	r0, [pc, #44]	@ (80004cc <main+0x48>)
 800049e:	f000 f991 	bl	80007c4 <osKernelAddThreads>

    /* Add the new task */
    osKernelAddThread(&task7);
 80004a2:	480b      	ldr	r0, [pc, #44]	@ (80004d0 <main+0x4c>)
 80004a4:	f000 f92a 	bl	80006fc <osKernelAddThread>
    osKernelAddThread(&task4);
 80004a8:	480a      	ldr	r0, [pc, #40]	@ (80004d4 <main+0x50>)
 80004aa:	f000 f927 	bl	80006fc <osKernelAddThread>
    osKernelAddThread(&task5);
 80004ae:	480a      	ldr	r0, [pc, #40]	@ (80004d8 <main+0x54>)
 80004b0:	f000 f924 	bl	80006fc <osKernelAddThread>
    osKernelAddThread(&task6);
 80004b4:	4809      	ldr	r0, [pc, #36]	@ (80004dc <main+0x58>)
 80004b6:	f000 f921 	bl	80006fc <osKernelAddThread>

    /* Set RoundRobin time quanta */
    osKernelLaunch(QUANTA);
 80004ba:	2002      	movs	r0, #2
 80004bc:	f000 f9ae 	bl	800081c <osKernelLaunch>

    while (1) {
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <main+0x3c>
 80004c4:	080003bd 	.word	0x080003bd
 80004c8:	0800038d 	.word	0x0800038d
 80004cc:	0800033d 	.word	0x0800033d
 80004d0:	08000429 	.word	0x08000429
 80004d4:	080003ed 	.word	0x080003ed
 80004d8:	08000401 	.word	0x08000401
 80004dc:	08000415 	.word	0x08000415

080004e0 <TIM2_IRQHandler>:
        // Main loop
    }
}

void TIM2_IRQHandler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
    /* Clear update interrupt flag */
    TIM2->SR &= ~SR_UIF;
 80004e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6113      	str	r3, [r2, #16]

    /* Do something */
    pTask2_Profiler++;
 80004f4:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <TIM2_IRQHandler+0x28>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a03      	ldr	r2, [pc, #12]	@ (8000508 <TIM2_IRQHandler+0x28>)
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000088 	.word	0x20000088

0800050c <motor_run>:

void motor_run(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    printf("Motor is starting...\n\r");
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <motor_run+0x10>)
 8000512:	f000 fd2f 	bl	8000f74 <iprintf>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	08001b00 	.word	0x08001b00

08000520 <valve_open>:
{
    printf("Motor is stopping...\n\r");
}

void valve_open(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    printf("Valve is opening...\n\r");
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <valve_open+0x10>)
 8000526:	f000 fd25 	bl	8000f74 <iprintf>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	08001b30 	.word	0x08001b30

08000534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	db0b      	blt.n	800055e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f003 021f 	and.w	r2, r3, #31
 800054c:	4906      	ldr	r1, [pc, #24]	@ (8000568 <__NVIC_EnableIRQ+0x34>)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	095b      	lsrs	r3, r3, #5
 8000554:	2001      	movs	r0, #1
 8000556:	fa00 f202 	lsl.w	r2, r0, r2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	e000e100 	.word	0xe000e100

0800056c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	@ (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <osKernelStackInit>:

/* Each thread will have stacksize of 100 i.e. 400 bytes */
int32_t *TCB_STACK[MAX_THREADS];

void osKernelStackInit(int i)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; /* Stack Pointer */
 80005c8:	4a4a      	ldr	r2, [pc, #296]	@ (80006f4 <osKernelStackInit+0x134>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	f503 62c0 	add.w	r2, r3, #1536	@ 0x600
 80005d4:	4948      	ldr	r1, [pc, #288]	@ (80006f8 <osKernelStackInit+0x138>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Set bit 21 (T-bit) in PSR to 1, to operate in Thumb mode */
    TCB_STACK[i][STACKSIZE - 1] =  (1U<<24); /* PSR */
 80005dc:	4a45      	ldr	r2, [pc, #276]	@ (80006f4 <osKernelStackInit+0x134>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 80005e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80005ec:	601a      	str	r2, [r3, #0]

    /** @Note : Block below is optional, for debugging purpose only */
    /** Dummy stack content */
    TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    /* R14 i.e LR */
 80005ee:	4a41      	ldr	r2, [pc, #260]	@ (80006f4 <osKernelStackInit+0x134>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80005fa:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005fe:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    /* R12 */
 8000600:	4a3c      	ldr	r2, [pc, #240]	@ (80006f4 <osKernelStackInit+0x134>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800060c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000610:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    /* R3 */
 8000612:	4a38      	ldr	r2, [pc, #224]	@ (80006f4 <osKernelStackInit+0x134>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061a:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 800061e:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000622:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    /* R2 */
 8000624:	4a33      	ldr	r2, [pc, #204]	@ (80006f4 <osKernelStackInit+0x134>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062c:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8000630:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000634:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    /* R1 */
 8000636:	4a2f      	ldr	r2, [pc, #188]	@ (80006f4 <osKernelStackInit+0x134>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000642:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000646:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    /* R0 */
 8000648:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <osKernelStackInit+0x134>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8000654:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000658:	601a      	str	r2, [r3, #0]

    TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    /* R11 */
 800065a:	4a26      	ldr	r2, [pc, #152]	@ (80006f4 <osKernelStackInit+0x134>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000662:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000666:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800066a:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   /* R10 */
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <osKernelStackInit+0x134>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8000678:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800067c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   /* R9 */
 800067e:	4a1d      	ldr	r2, [pc, #116]	@ (80006f4 <osKernelStackInit+0x134>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 800068a:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800068e:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   /* R8 */
 8000690:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <osKernelStackInit+0x134>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800069c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80006a0:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   /* R7 */
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <osKernelStackInit+0x134>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 80006ae:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80006b2:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   /* R6 */
 80006b4:	4a0f      	ldr	r2, [pc, #60]	@ (80006f4 <osKernelStackInit+0x134>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006bc:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80006c0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80006c4:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   /* R5 */
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <osKernelStackInit+0x134>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 80006d2:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80006d6:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   /* R4 */
 80006d8:	4a06      	ldr	r2, [pc, #24]	@ (80006f4 <osKernelStackInit+0x134>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80006e4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000108 	.word	0x20000108
 80006f8:	200000b0 	.word	0x200000b0

080006fc <osKernelAddThread>:

uint8_t osKernelAddThread(void(*task)(void))
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
    /* Disable global interrupts */
    __disable_irq();

    if (numThreads >= MAX_THREADS)
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <osKernelAddThread+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b09      	cmp	r3, #9
 800070e:	dd03      	ble.n	8000718 <osKernelAddThread+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000710:	b662      	cpsie	i
}
 8000712:	bf00      	nop
    {
        __enable_irq();
        return 0; // Too many threads
 8000714:	2300      	movs	r3, #0
 8000716:	e049      	b.n	80007ac <osKernelAddThread+0xb0>
    }

    TCB_STACK[numThreads] = malloc(STACKSIZE * sizeof(int32_t));
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <osKernelAddThread+0xb8>)
 800071a:	681c      	ldr	r4, [r3, #0]
 800071c:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8000720:	f000 fab0 	bl	8000c84 <malloc>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <osKernelAddThread+0xbc>)
 800072a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    if (TCB_STACK[numThreads] == NULL)
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a21      	ldr	r2, [pc, #132]	@ (80007b8 <osKernelAddThread+0xbc>)
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <osKernelAddThread+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 800073c:	b662      	cpsie	i
}
 800073e:	bf00      	nop
    {
        __enable_irq();
        return 0; // Allocation failed
 8000740:	2300      	movs	r3, #0
 8000742:	e033      	b.n	80007ac <osKernelAddThread+0xb0>
    }

    osKernelStackInit(numThreads);
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff39 	bl	80005c0 <osKernelStackInit>
    TCB_STACK[numThreads][STACKSIZE - 2] = (int32_t)(task);
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <osKernelAddThread+0xbc>)
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	601a      	str	r2, [r3, #0]

    if (numThreads > 0)
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	dd0b      	ble.n	8000780 <osKernelAddThread+0x84>
    {
        tcbs[numThreads - 1].nextPt = &tcbs[numThreads];
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <osKernelAddThread+0xb8>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <osKernelAddThread+0xb8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3b01      	subs	r3, #1
 8000772:	00d2      	lsls	r2, r2, #3
 8000774:	4911      	ldr	r1, [pc, #68]	@ (80007bc <osKernelAddThread+0xc0>)
 8000776:	440a      	add	r2, r1
 8000778:	4910      	ldr	r1, [pc, #64]	@ (80007bc <osKernelAddThread+0xc0>)
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	440b      	add	r3, r1
 800077e:	605a      	str	r2, [r3, #4]
    }
    tcbs[numThreads].nextPt = &tcbs[0];
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <osKernelAddThread+0xc0>)
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	4413      	add	r3, r2
 800078a:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <osKernelAddThread+0xc0>)
 800078c:	605a      	str	r2, [r3, #4]
    numThreads++;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <osKernelAddThread+0xb8>)
 8000796:	6013      	str	r3, [r2, #0]

    if (numThreads == 1)
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <osKernelAddThread+0xb8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d102      	bne.n	80007a6 <osKernelAddThread+0xaa>
    {
        currentPt = &tcbs[0];
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <osKernelAddThread+0xc4>)
 80007a2:	4a06      	ldr	r2, [pc, #24]	@ (80007bc <osKernelAddThread+0xc0>)
 80007a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007a6:	b662      	cpsie	i
}
 80007a8:	bf00      	nop
    }

    /* Enable global interrupts */
    __enable_irq();

    return 1;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	20000104 	.word	0x20000104
 80007b8:	20000108 	.word	0x20000108
 80007bc:	200000b0 	.word	0x200000b0
 80007c0:	20000100 	.word	0x20000100

080007c4 <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*task0)(void), void(*task1)(void), void(*task2)(void))
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
    return osKernelAddThread(task0) && osKernelAddThread(task1) && osKernelAddThread(task2);
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff ff93 	bl	80006fc <osKernelAddThread>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00d      	beq.n	80007f8 <osKernelAddThreads+0x34>
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f7ff ff8d 	bl	80006fc <osKernelAddThread>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <osKernelAddThreads+0x34>
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff87 	bl	80006fc <osKernelAddThread>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <osKernelAddThreads+0x34>
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <osKernelAddThreads+0x36>
 80007f8:	2300      	movs	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <osKernelInit>:

void osKernelInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
    MILLIS_PRESCALER  = (BUS_FREQ/1000);
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <osKernelInit+0x14>)
 800080a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	200000ac 	.word	0x200000ac

0800081c <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    /* Reset systick */
    SysTick->CTRL = SYSTICK_RST;
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <osKernelLaunch+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]

    /* Clear systick current value register */
    SysTick->VAL = 0;
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <osKernelLaunch+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]

    /* Load quanta */
    SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 8000830:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <osKernelLaunch+0x50>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	fb02 f303 	mul.w	r3, r2, r3
 800083a:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <osKernelLaunch+0x4c>)
 800083c:	3b01      	subs	r3, #1
 800083e:	6053      	str	r3, [r2, #4]

    /* Set systick to low priority */
    NVIC_SetPriority(SysTick_IRQn, 15);
 8000840:	210f      	movs	r1, #15
 8000842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000846:	f7ff fe91 	bl	800056c <__NVIC_SetPriority>

    /* Enable systick, select internal clock */
    SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <osKernelLaunch+0x4c>)
 800084c:	2205      	movs	r2, #5
 800084e:	601a      	str	r2, [r3, #0]

    /* Enable systick interrupt */
    SysTick->CTRL  |= CTRL_TICKINT;
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <osKernelLaunch+0x4c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <osKernelLaunch+0x4c>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6013      	str	r3, [r2, #0]

    /* Launch scheduler */
    osSchedulerLaunch();
 800085c:	f000 f81e 	bl	800089c <osSchedulerLaunch>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	e000e010 	.word	0xe000e010
 800086c:	200000ac 	.word	0x200000ac

08000870 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
    /* SUSPEND CURRENT THREAD */

    /* Disable global interrupts */
    __asm("CPSID    I");
 8000870:	b672      	cpsid	i

    /* Save r4, r5, r6, r7, r8, r9, r10, 11 */
    __asm("PUSH  {R4-R11}");
 8000872:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

    /* Load address of currentPt into r0 */
    __asm("LDR R0, =currentPt");
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <SysTick_Handler+0x28>)

    /* Load r1 from address equals r0, i.e. r1 = currentPt */
    __asm("LDR R1,[R0]");
 8000878:	6801      	ldr	r1, [r0, #0]

    /* Store Cortex-M SP at address equals r1, i.e Save SP into tcb */
    __asm("STR SP,[R1]");
 800087a:	f8c1 d000 	str.w	sp, [r1]

    /* CHOOSE NEXT THREAD */
    __asm("PUSH    {R0,LR}");
 800087e:	b501      	push	{r0, lr}
    __asm("BL        osSchedulerRoundRobin");
 8000880:	f000 f824 	bl	80008cc <osSchedulerRoundRobin>
    __asm("POP    {R0,LR}");
 8000884:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

    /* R1 =  currentPt i.e. New Thread */
    __asm("LDR        R1,[R0]");
 8000888:	6801      	ldr	r1, [r0, #0]
    /* SP  = currentPt->StackPt */
    __asm("LDR        SP,[R1]");
 800088a:	f8d1 d000 	ldr.w	sp, [r1]
    /* Restore r4, r5, r6, r7, r8, r9, r10, 11 */
    __asm("POP {R4-R11}");
 800088e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

    /* Enable global interrupts */
    __asm("CPSIE    I");
 8000892:	b662      	cpsie	i

    /* Return from exception and restore r0, r1, r2, r3, r12, lr, pc, psr */
    __asm("BX    LR");
 8000894:	4770      	bx	lr
}
 8000896:	bf00      	nop
 8000898:	20000100 	.word	0x20000100

0800089c <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
    /* Load address of currentPt into R0 */
    __asm("LDR R0,=currentPt");
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <osSchedulerLaunch+0x2c>)

    /* Load r2 from address equals r0, i.e r2 = currentPt */
    __asm("LDR R2,[r0]");
 80008a2:	6802      	ldr	r2, [r0, #0]

    /* Load Cortex-M SP from address equals R2, i.e. SP = currentPt->stackPt */
    __asm("LDR  SP,[R2]");
 80008a4:	f8d2 d000 	ldr.w	sp, [r2]

    /* Restore r4, r5, r6, r7, r8, r9, r10, r11 */
    __asm("POP {R4-R11}");
 80008a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

    /* Restore r12 */
    __asm("POP {R12}");
 80008ac:	f85d cb04 	ldr.w	ip, [sp], #4

    /* Restore r0, r1, r2, r3 */
    __asm("POP    {R0-R3}");
 80008b0:	bc0f      	pop	{r0, r1, r2, r3}

    /* Skip LR */
    __asm("ADD  SP,SP,#4");
 80008b2:	b001      	add	sp, #4

    /* Create a new start location by popping LR */
    __asm("POP {LR}");
 80008b4:	f85d eb04 	ldr.w	lr, [sp], #4

    /* Skip PSR by adding 4 to SP */
    __asm("ADD  SP,SP,#4");
 80008b8:	b001      	add	sp, #4

    /* Enable global interrupts */
    __asm("CPSIE    I");
 80008ba:	b662      	cpsie	i

    /* Return from exception */
    __asm("BX    LR");
 80008bc:	4770      	bx	lr
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	0000      	.short	0x0000
 80008c8:	20000100 	.word	0x20000100

080008cc <osSchedulerRoundRobin>:
    /* Trigger SysTick */
    INTCTRL = PENDSTSET;
}

void osSchedulerRoundRobin(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    if ((++period_tick) == PERIOD)
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <osSchedulerRoundRobin+0x30>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <osSchedulerRoundRobin+0x30>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <osSchedulerRoundRobin+0x30>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b64      	cmp	r3, #100	@ 0x64
 80008e0:	d104      	bne.n	80008ec <osSchedulerRoundRobin+0x20>
    {
        (*task3)();
 80008e2:	f7ff fd1d 	bl	8000320 <task3>
        period_tick = 0;
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <osSchedulerRoundRobin+0x30>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
    }

    currentPt = currentPt->nextPt;
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <osSchedulerRoundRobin+0x34>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	4a03      	ldr	r2, [pc, #12]	@ (8000900 <osSchedulerRoundRobin+0x34>)
 80008f4:	6013      	str	r3, [r2, #0]
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000a8 	.word	0x200000a8
 8000900:	20000100 	.word	0x20000100

08000904 <tim2_1hz_interrupt_init>:

void tim2_1hz_interrupt_init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    /* Enable clock access to tim2 */
    RCC->APB1ENR |= TIM2EN;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <tim2_1hz_interrupt_init+0x50>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	4a11      	ldr	r2, [pc, #68]	@ (8000954 <tim2_1hz_interrupt_init+0x50>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Set timer prescaler */
    TIM2->PSC =  1600 - 1; // 16 000  000 / 1600 = 10 000
 8000914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000918:	f240 623f 	movw	r2, #1599	@ 0x63f
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set auto-reload value */
    TIM2->ARR =  10000 - 1;  // 10 0000 / 10 000 =  1
 800091e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000922:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear counter */
    TIM2->CNT = 0;
 8000928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable timer */
    TIM2->CR1 =  CR1_CEN;
 8000930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]

    /* Enable timer interrupt */
    TIM2->DIER |= DIER_UIE;
 8000938:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	60d3      	str	r3, [r2, #12]

    /* Enable timer interrupt in NVIC */
    NVIC_EnableIRQ(TIM2_IRQn);
 8000948:	201c      	movs	r0, #28
 800094a:	f7ff fdf3 	bl	8000534 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <osSemaphoreInit>:

void osSemaphoreInit(int32_t *semaphore, int32_t value)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    *semaphore = value;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <osSemaphoreSet>:

void osSemaphoreSet(int32_t *semaphore)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
}
 800097c:	bf00      	nop
    __disable_irq();
    *semaphore += 1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000988:	b662      	cpsie	i
}
 800098a:	bf00      	nop
    __enable_irq();
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <osSemaphoreWait>:

void osSemaphoreWait(int32_t *semaphore)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800099e:	b672      	cpsid	i
}
 80009a0:	bf00      	nop
    __disable_irq();
    while (*semaphore <= 0)
 80009a2:	e003      	b.n	80009ac <osSemaphoreWait+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80009a8:	b662      	cpsie	i
}
 80009aa:	bf00      	nop
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	ddf7      	ble.n	80009a4 <osSemaphoreWait+0xe>
    {
        __disable_irq();
        __enable_irq();
    }
    *semaphore -= 1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009be:	b662      	cpsie	i
}
 80009c0:	bf00      	nop
    __enable_irq();
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
	}

return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f873 	bl	8000b0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
	}
	return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a64:	605a      	str	r2, [r3, #4]
	return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <_isatty>:

int _isatty(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	return 1;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
	return 0;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
	...

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f000 fb04 	bl	80010dc <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20020000 	.word	0x20020000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	20000130 	.word	0x20000130
 8000b08:	20000280 	.word	0x20000280

08000b0c <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);


int __io_putchar(int ch)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f84f 	bl	8000bb8 <uart_write>
	return ch;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <uart_tx_init>:

void uart_tx_init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	 RCC->AHB1ENR  |= GPIOAEN;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <uart_tx_init+0x84>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba8 <uart_tx_init+0x84>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	 GPIOA->MODER &=~(1U<<4);
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <uart_tx_init+0x88>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	@ (8000bac <uart_tx_init+0x88>)
 8000b3a:	f023 0310 	bic.w	r3, r3, #16
 8000b3e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=(1U<<5);
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <uart_tx_init+0x88>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <uart_tx_init+0x88>)
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7 (UART2_TX)*/
	 GPIOA->AFR[0] |=(1U<<8);
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <uart_tx_init+0x88>)
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	4a16      	ldr	r2, [pc, #88]	@ (8000bac <uart_tx_init+0x88>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b56:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<9);
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <uart_tx_init+0x88>)
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <uart_tx_init+0x88>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b62:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<10);
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <uart_tx_init+0x88>)
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <uart_tx_init+0x88>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(1U<<11);
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <uart_tx_init+0x88>)
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <uart_tx_init+0x88>)
 8000b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000b7a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART*/
	 RCC->APB1ENR |= UART2EN;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <uart_tx_init+0x84>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a09      	ldr	r2, [pc, #36]	@ (8000ba8 <uart_tx_init+0x84>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	 uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 8000b88:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000b8c:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <uart_tx_init+0x8c>)
 8000b8e:	f000 f829 	bl	8000be4 <uart_set_baudrate>

	/*Configure transfer direction*/
	 USART2->CR1 = CR1_TE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <uart_tx_init+0x90>)
 8000b94:	2208      	movs	r2, #8
 8000b96:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	 USART2->CR1 |= CR1_UE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <uart_tx_init+0x90>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <uart_tx_init+0x90>)
 8000b9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	00f42400 	.word	0x00f42400
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <uart_write>:

static void uart_write(int ch)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	 while(!(USART2->SR & SR_TXE)){}
 8000bc0:	bf00      	nop
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <uart_write+0x28>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f9      	beq.n	8000bc2 <uart_write+0xa>

	/*Write to transmit data register*/
	 USART2->DR =  (ch & 0XFF);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	@ (8000be0 <uart_write+0x28>)
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	6053      	str	r3, [r2, #4]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40004400 	.word	0x40004400

08000be4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f80b 	bl	8000c0c <compute_uart_bd>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <uart_set_baudrate+0x24>)
 8000bfc:	609a      	str	r2, [r3, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400

08000c0c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	085a      	lsrs	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c24:	b29b      	uxth	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c30:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	@ (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5e:	f000 fa43 	bl	80010e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff fc0f 	bl	8000484 <main>

08000c66 <LoopForever>:

LoopForever:
  b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   r0, =_estack
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c74:	08001ba4 	.word	0x08001ba4
  ldr r2, =_sbss
 8000c78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c7c:	20000280 	.word	0x20000280

08000c80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <malloc>:
 8000c84:	4b02      	ldr	r3, [pc, #8]	@ (8000c90 <malloc+0xc>)
 8000c86:	4601      	mov	r1, r0
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f000 b825 	b.w	8000cd8 <_malloc_r>
 8000c8e:	bf00      	nop
 8000c90:	2000000c 	.word	0x2000000c

08000c94 <sbrk_aligned>:
 8000c94:	b570      	push	{r4, r5, r6, lr}
 8000c96:	4e0f      	ldr	r6, [pc, #60]	@ (8000cd4 <sbrk_aligned+0x40>)
 8000c98:	460c      	mov	r4, r1
 8000c9a:	6831      	ldr	r1, [r6, #0]
 8000c9c:	4605      	mov	r5, r0
 8000c9e:	b911      	cbnz	r1, 8000ca6 <sbrk_aligned+0x12>
 8000ca0:	f000 f9fa 	bl	8001098 <_sbrk_r>
 8000ca4:	6030      	str	r0, [r6, #0]
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f000 f9f5 	bl	8001098 <_sbrk_r>
 8000cae:	1c43      	adds	r3, r0, #1
 8000cb0:	d103      	bne.n	8000cba <sbrk_aligned+0x26>
 8000cb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	1cc4      	adds	r4, r0, #3
 8000cbc:	f024 0403 	bic.w	r4, r4, #3
 8000cc0:	42a0      	cmp	r0, r4
 8000cc2:	d0f8      	beq.n	8000cb6 <sbrk_aligned+0x22>
 8000cc4:	1a21      	subs	r1, r4, r0
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f000 f9e6 	bl	8001098 <_sbrk_r>
 8000ccc:	3001      	adds	r0, #1
 8000cce:	d1f2      	bne.n	8000cb6 <sbrk_aligned+0x22>
 8000cd0:	e7ef      	b.n	8000cb2 <sbrk_aligned+0x1e>
 8000cd2:	bf00      	nop
 8000cd4:	20000134 	.word	0x20000134

08000cd8 <_malloc_r>:
 8000cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cdc:	1ccd      	adds	r5, r1, #3
 8000cde:	f025 0503 	bic.w	r5, r5, #3
 8000ce2:	3508      	adds	r5, #8
 8000ce4:	2d0c      	cmp	r5, #12
 8000ce6:	bf38      	it	cc
 8000ce8:	250c      	movcc	r5, #12
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	4606      	mov	r6, r0
 8000cee:	db01      	blt.n	8000cf4 <_malloc_r+0x1c>
 8000cf0:	42a9      	cmp	r1, r5
 8000cf2:	d904      	bls.n	8000cfe <_malloc_r+0x26>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	6033      	str	r3, [r6, #0]
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000dd4 <_malloc_r+0xfc>
 8000d02:	f000 f869 	bl	8000dd8 <__malloc_lock>
 8000d06:	f8d8 3000 	ldr.w	r3, [r8]
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	bb44      	cbnz	r4, 8000d60 <_malloc_r+0x88>
 8000d0e:	4629      	mov	r1, r5
 8000d10:	4630      	mov	r0, r6
 8000d12:	f7ff ffbf 	bl	8000c94 <sbrk_aligned>
 8000d16:	1c43      	adds	r3, r0, #1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	d158      	bne.n	8000dce <_malloc_r+0xf6>
 8000d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8000d20:	4627      	mov	r7, r4
 8000d22:	2f00      	cmp	r7, #0
 8000d24:	d143      	bne.n	8000dae <_malloc_r+0xd6>
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	d04b      	beq.n	8000dc2 <_malloc_r+0xea>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	4630      	mov	r0, r6
 8000d30:	eb04 0903 	add.w	r9, r4, r3
 8000d34:	f000 f9b0 	bl	8001098 <_sbrk_r>
 8000d38:	4581      	cmp	r9, r0
 8000d3a:	d142      	bne.n	8000dc2 <_malloc_r+0xea>
 8000d3c:	6821      	ldr	r1, [r4, #0]
 8000d3e:	1a6d      	subs	r5, r5, r1
 8000d40:	4629      	mov	r1, r5
 8000d42:	4630      	mov	r0, r6
 8000d44:	f7ff ffa6 	bl	8000c94 <sbrk_aligned>
 8000d48:	3001      	adds	r0, #1
 8000d4a:	d03a      	beq.n	8000dc2 <_malloc_r+0xea>
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	442b      	add	r3, r5
 8000d50:	6023      	str	r3, [r4, #0]
 8000d52:	f8d8 3000 	ldr.w	r3, [r8]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	bb62      	cbnz	r2, 8000db4 <_malloc_r+0xdc>
 8000d5a:	f8c8 7000 	str.w	r7, [r8]
 8000d5e:	e00f      	b.n	8000d80 <_malloc_r+0xa8>
 8000d60:	6822      	ldr	r2, [r4, #0]
 8000d62:	1b52      	subs	r2, r2, r5
 8000d64:	d420      	bmi.n	8000da8 <_malloc_r+0xd0>
 8000d66:	2a0b      	cmp	r2, #11
 8000d68:	d917      	bls.n	8000d9a <_malloc_r+0xc2>
 8000d6a:	1961      	adds	r1, r4, r5
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	6025      	str	r5, [r4, #0]
 8000d70:	bf18      	it	ne
 8000d72:	6059      	strne	r1, [r3, #4]
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	bf08      	it	eq
 8000d78:	f8c8 1000 	streq.w	r1, [r8]
 8000d7c:	5162      	str	r2, [r4, r5]
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	4630      	mov	r0, r6
 8000d82:	f000 f82f 	bl	8000de4 <__malloc_unlock>
 8000d86:	f104 000b 	add.w	r0, r4, #11
 8000d8a:	1d23      	adds	r3, r4, #4
 8000d8c:	f020 0007 	bic.w	r0, r0, #7
 8000d90:	1ac2      	subs	r2, r0, r3
 8000d92:	bf1c      	itt	ne
 8000d94:	1a1b      	subne	r3, r3, r0
 8000d96:	50a3      	strne	r3, [r4, r2]
 8000d98:	e7af      	b.n	8000cfa <_malloc_r+0x22>
 8000d9a:	6862      	ldr	r2, [r4, #4]
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	bf0c      	ite	eq
 8000da0:	f8c8 2000 	streq.w	r2, [r8]
 8000da4:	605a      	strne	r2, [r3, #4]
 8000da6:	e7eb      	b.n	8000d80 <_malloc_r+0xa8>
 8000da8:	4623      	mov	r3, r4
 8000daa:	6864      	ldr	r4, [r4, #4]
 8000dac:	e7ae      	b.n	8000d0c <_malloc_r+0x34>
 8000dae:	463c      	mov	r4, r7
 8000db0:	687f      	ldr	r7, [r7, #4]
 8000db2:	e7b6      	b.n	8000d22 <_malloc_r+0x4a>
 8000db4:	461a      	mov	r2, r3
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	42a3      	cmp	r3, r4
 8000dba:	d1fb      	bne.n	8000db4 <_malloc_r+0xdc>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	6053      	str	r3, [r2, #4]
 8000dc0:	e7de      	b.n	8000d80 <_malloc_r+0xa8>
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	6033      	str	r3, [r6, #0]
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f000 f80c 	bl	8000de4 <__malloc_unlock>
 8000dcc:	e794      	b.n	8000cf8 <_malloc_r+0x20>
 8000dce:	6005      	str	r5, [r0, #0]
 8000dd0:	e7d6      	b.n	8000d80 <_malloc_r+0xa8>
 8000dd2:	bf00      	nop
 8000dd4:	20000138 	.word	0x20000138

08000dd8 <__malloc_lock>:
 8000dd8:	4801      	ldr	r0, [pc, #4]	@ (8000de0 <__malloc_lock+0x8>)
 8000dda:	f000 b9aa 	b.w	8001132 <__retarget_lock_acquire_recursive>
 8000dde:	bf00      	nop
 8000de0:	2000027c 	.word	0x2000027c

08000de4 <__malloc_unlock>:
 8000de4:	4801      	ldr	r0, [pc, #4]	@ (8000dec <__malloc_unlock+0x8>)
 8000de6:	f000 b9a5 	b.w	8001134 <__retarget_lock_release_recursive>
 8000dea:	bf00      	nop
 8000dec:	2000027c 	.word	0x2000027c

08000df0 <std>:
 8000df0:	2300      	movs	r3, #0
 8000df2:	b510      	push	{r4, lr}
 8000df4:	4604      	mov	r4, r0
 8000df6:	e9c0 3300 	strd	r3, r3, [r0]
 8000dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dfe:	6083      	str	r3, [r0, #8]
 8000e00:	8181      	strh	r1, [r0, #12]
 8000e02:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e04:	81c2      	strh	r2, [r0, #14]
 8000e06:	6183      	str	r3, [r0, #24]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	305c      	adds	r0, #92	@ 0x5c
 8000e0e:	f000 f906 	bl	800101e <memset>
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <std+0x58>)
 8000e14:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <std+0x5c>)
 8000e18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <std+0x60>)
 8000e1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <std+0x64>)
 8000e20:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <std+0x68>)
 8000e24:	6224      	str	r4, [r4, #32]
 8000e26:	429c      	cmp	r4, r3
 8000e28:	d006      	beq.n	8000e38 <std+0x48>
 8000e2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e2e:	4294      	cmp	r4, r2
 8000e30:	d002      	beq.n	8000e38 <std+0x48>
 8000e32:	33d0      	adds	r3, #208	@ 0xd0
 8000e34:	429c      	cmp	r4, r3
 8000e36:	d105      	bne.n	8000e44 <std+0x54>
 8000e38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e40:	f000 b976 	b.w	8001130 <__retarget_lock_init_recursive>
 8000e44:	bd10      	pop	{r4, pc}
 8000e46:	bf00      	nop
 8000e48:	08000f99 	.word	0x08000f99
 8000e4c:	08000fbb 	.word	0x08000fbb
 8000e50:	08000ff3 	.word	0x08000ff3
 8000e54:	08001017 	.word	0x08001017
 8000e58:	2000013c 	.word	0x2000013c

08000e5c <stdio_exit_handler>:
 8000e5c:	4a02      	ldr	r2, [pc, #8]	@ (8000e68 <stdio_exit_handler+0xc>)
 8000e5e:	4903      	ldr	r1, [pc, #12]	@ (8000e6c <stdio_exit_handler+0x10>)
 8000e60:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <stdio_exit_handler+0x14>)
 8000e62:	f000 b869 	b.w	8000f38 <_fwalk_sglue>
 8000e66:	bf00      	nop
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	08001869 	.word	0x08001869
 8000e70:	20000010 	.word	0x20000010

08000e74 <cleanup_stdio>:
 8000e74:	6841      	ldr	r1, [r0, #4]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <cleanup_stdio+0x34>)
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	b510      	push	{r4, lr}
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	d001      	beq.n	8000e84 <cleanup_stdio+0x10>
 8000e80:	f000 fcf2 	bl	8001868 <_fflush_r>
 8000e84:	68a1      	ldr	r1, [r4, #8]
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <cleanup_stdio+0x38>)
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d002      	beq.n	8000e92 <cleanup_stdio+0x1e>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f000 fceb 	bl	8001868 <_fflush_r>
 8000e92:	68e1      	ldr	r1, [r4, #12]
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <cleanup_stdio+0x3c>)
 8000e96:	4299      	cmp	r1, r3
 8000e98:	d004      	beq.n	8000ea4 <cleanup_stdio+0x30>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ea0:	f000 bce2 	b.w	8001868 <_fflush_r>
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000013c 	.word	0x2000013c
 8000eac:	200001a4 	.word	0x200001a4
 8000eb0:	2000020c 	.word	0x2000020c

08000eb4 <global_stdio_init.part.0>:
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <global_stdio_init.part.0+0x30>)
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	@ (8000ee8 <global_stdio_init.part.0+0x34>)
 8000eba:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <global_stdio_init.part.0+0x38>)
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	f7ff ff94 	bl	8000df0 <std>
 8000ec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2109      	movs	r1, #9
 8000ed0:	f7ff ff8e 	bl	8000df0 <std>
 8000ed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ed8:	2202      	movs	r2, #2
 8000eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ede:	2112      	movs	r1, #18
 8000ee0:	f7ff bf86 	b.w	8000df0 <std>
 8000ee4:	20000274 	.word	0x20000274
 8000ee8:	2000013c 	.word	0x2000013c
 8000eec:	08000e5d 	.word	0x08000e5d

08000ef0 <__sfp_lock_acquire>:
 8000ef0:	4801      	ldr	r0, [pc, #4]	@ (8000ef8 <__sfp_lock_acquire+0x8>)
 8000ef2:	f000 b91e 	b.w	8001132 <__retarget_lock_acquire_recursive>
 8000ef6:	bf00      	nop
 8000ef8:	2000027d 	.word	0x2000027d

08000efc <__sfp_lock_release>:
 8000efc:	4801      	ldr	r0, [pc, #4]	@ (8000f04 <__sfp_lock_release+0x8>)
 8000efe:	f000 b919 	b.w	8001134 <__retarget_lock_release_recursive>
 8000f02:	bf00      	nop
 8000f04:	2000027d 	.word	0x2000027d

08000f08 <__sinit>:
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	f7ff fff0 	bl	8000ef0 <__sfp_lock_acquire>
 8000f10:	6a23      	ldr	r3, [r4, #32]
 8000f12:	b11b      	cbz	r3, 8000f1c <__sinit+0x14>
 8000f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f18:	f7ff bff0 	b.w	8000efc <__sfp_lock_release>
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <__sinit+0x28>)
 8000f1e:	6223      	str	r3, [r4, #32]
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <__sinit+0x2c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f5      	bne.n	8000f14 <__sinit+0xc>
 8000f28:	f7ff ffc4 	bl	8000eb4 <global_stdio_init.part.0>
 8000f2c:	e7f2      	b.n	8000f14 <__sinit+0xc>
 8000f2e:	bf00      	nop
 8000f30:	08000e75 	.word	0x08000e75
 8000f34:	20000274 	.word	0x20000274

08000f38 <_fwalk_sglue>:
 8000f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f3c:	4607      	mov	r7, r0
 8000f3e:	4688      	mov	r8, r1
 8000f40:	4614      	mov	r4, r2
 8000f42:	2600      	movs	r6, #0
 8000f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f48:	f1b9 0901 	subs.w	r9, r9, #1
 8000f4c:	d505      	bpl.n	8000f5a <_fwalk_sglue+0x22>
 8000f4e:	6824      	ldr	r4, [r4, #0]
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d1f7      	bne.n	8000f44 <_fwalk_sglue+0xc>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f5a:	89ab      	ldrh	r3, [r5, #12]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d907      	bls.n	8000f70 <_fwalk_sglue+0x38>
 8000f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f64:	3301      	adds	r3, #1
 8000f66:	d003      	beq.n	8000f70 <_fwalk_sglue+0x38>
 8000f68:	4629      	mov	r1, r5
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	47c0      	blx	r8
 8000f6e:	4306      	orrs	r6, r0
 8000f70:	3568      	adds	r5, #104	@ 0x68
 8000f72:	e7e9      	b.n	8000f48 <_fwalk_sglue+0x10>

08000f74 <iprintf>:
 8000f74:	b40f      	push	{r0, r1, r2, r3}
 8000f76:	b507      	push	{r0, r1, r2, lr}
 8000f78:	4906      	ldr	r1, [pc, #24]	@ (8000f94 <iprintf+0x20>)
 8000f7a:	ab04      	add	r3, sp, #16
 8000f7c:	6808      	ldr	r0, [r1, #0]
 8000f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f82:	6881      	ldr	r1, [r0, #8]
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f000 f949 	bl	800121c <_vfiprintf_r>
 8000f8a:	b003      	add	sp, #12
 8000f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr
 8000f94:	2000000c 	.word	0x2000000c

08000f98 <__sread>:
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa0:	f000 f868 	bl	8001074 <_read_r>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	bfab      	itete	ge
 8000fa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000faa:	89a3      	ldrhlt	r3, [r4, #12]
 8000fac:	181b      	addge	r3, r3, r0
 8000fae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000fb2:	bfac      	ite	ge
 8000fb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000fb6:	81a3      	strhlt	r3, [r4, #12]
 8000fb8:	bd10      	pop	{r4, pc}

08000fba <__swrite>:
 8000fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbe:	461f      	mov	r7, r3
 8000fc0:	898b      	ldrh	r3, [r1, #12]
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	4616      	mov	r6, r2
 8000fca:	d505      	bpl.n	8000fd8 <__swrite+0x1e>
 8000fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f000 f83c 	bl	8001050 <_lseek_r>
 8000fd8:	89a3      	ldrh	r3, [r4, #12]
 8000fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fe2:	81a3      	strh	r3, [r4, #12]
 8000fe4:	4632      	mov	r2, r6
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fee:	f000 b863 	b.w	80010b8 <_write_r>

08000ff2 <__sseek>:
 8000ff2:	b510      	push	{r4, lr}
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffa:	f000 f829 	bl	8001050 <_lseek_r>
 8000ffe:	1c43      	adds	r3, r0, #1
 8001000:	89a3      	ldrh	r3, [r4, #12]
 8001002:	bf15      	itete	ne
 8001004:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001006:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800100a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800100e:	81a3      	strheq	r3, [r4, #12]
 8001010:	bf18      	it	ne
 8001012:	81a3      	strhne	r3, [r4, #12]
 8001014:	bd10      	pop	{r4, pc}

08001016 <__sclose>:
 8001016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800101a:	f000 b809 	b.w	8001030 <_close_r>

0800101e <memset>:
 800101e:	4402      	add	r2, r0
 8001020:	4603      	mov	r3, r0
 8001022:	4293      	cmp	r3, r2
 8001024:	d100      	bne.n	8001028 <memset+0xa>
 8001026:	4770      	bx	lr
 8001028:	f803 1b01 	strb.w	r1, [r3], #1
 800102c:	e7f9      	b.n	8001022 <memset+0x4>
	...

08001030 <_close_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4d06      	ldr	r5, [pc, #24]	@ (800104c <_close_r+0x1c>)
 8001034:	2300      	movs	r3, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	602b      	str	r3, [r5, #0]
 800103c:	f7ff fcff 	bl	8000a3e <_close>
 8001040:	1c43      	adds	r3, r0, #1
 8001042:	d102      	bne.n	800104a <_close_r+0x1a>
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	b103      	cbz	r3, 800104a <_close_r+0x1a>
 8001048:	6023      	str	r3, [r4, #0]
 800104a:	bd38      	pop	{r3, r4, r5, pc}
 800104c:	20000278 	.word	0x20000278

08001050 <_lseek_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d07      	ldr	r5, [pc, #28]	@ (8001070 <_lseek_r+0x20>)
 8001054:	4604      	mov	r4, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4611      	mov	r1, r2
 800105a:	2200      	movs	r2, #0
 800105c:	602a      	str	r2, [r5, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	f7ff fd11 	bl	8000a86 <_lseek>
 8001064:	1c43      	adds	r3, r0, #1
 8001066:	d102      	bne.n	800106e <_lseek_r+0x1e>
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	b103      	cbz	r3, 800106e <_lseek_r+0x1e>
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	20000278 	.word	0x20000278

08001074 <_read_r>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4d07      	ldr	r5, [pc, #28]	@ (8001094 <_read_r+0x20>)
 8001078:	4604      	mov	r4, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4611      	mov	r1, r2
 800107e:	2200      	movs	r2, #0
 8001080:	602a      	str	r2, [r5, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	f7ff fca2 	bl	80009cc <_read>
 8001088:	1c43      	adds	r3, r0, #1
 800108a:	d102      	bne.n	8001092 <_read_r+0x1e>
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	b103      	cbz	r3, 8001092 <_read_r+0x1e>
 8001090:	6023      	str	r3, [r4, #0]
 8001092:	bd38      	pop	{r3, r4, r5, pc}
 8001094:	20000278 	.word	0x20000278

08001098 <_sbrk_r>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4d06      	ldr	r5, [pc, #24]	@ (80010b4 <_sbrk_r+0x1c>)
 800109c:	2300      	movs	r3, #0
 800109e:	4604      	mov	r4, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	f7ff fcfc 	bl	8000aa0 <_sbrk>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_sbrk_r+0x1a>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_sbrk_r+0x1a>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	20000278 	.word	0x20000278

080010b8 <_write_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d07      	ldr	r5, [pc, #28]	@ (80010d8 <_write_r+0x20>)
 80010bc:	4604      	mov	r4, r0
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	602a      	str	r2, [r5, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fc9d 	bl	8000a06 <_write>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_write_r+0x1e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_write_r+0x1e>
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	20000278 	.word	0x20000278

080010dc <__errno>:
 80010dc:	4b01      	ldr	r3, [pc, #4]	@ (80010e4 <__errno+0x8>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000000c 	.word	0x2000000c

080010e8 <__libc_init_array>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4d0d      	ldr	r5, [pc, #52]	@ (8001120 <__libc_init_array+0x38>)
 80010ec:	4c0d      	ldr	r4, [pc, #52]	@ (8001124 <__libc_init_array+0x3c>)
 80010ee:	1b64      	subs	r4, r4, r5
 80010f0:	10a4      	asrs	r4, r4, #2
 80010f2:	2600      	movs	r6, #0
 80010f4:	42a6      	cmp	r6, r4
 80010f6:	d109      	bne.n	800110c <__libc_init_array+0x24>
 80010f8:	4d0b      	ldr	r5, [pc, #44]	@ (8001128 <__libc_init_array+0x40>)
 80010fa:	4c0c      	ldr	r4, [pc, #48]	@ (800112c <__libc_init_array+0x44>)
 80010fc:	f000 fcf4 	bl	8001ae8 <_init>
 8001100:	1b64      	subs	r4, r4, r5
 8001102:	10a4      	asrs	r4, r4, #2
 8001104:	2600      	movs	r6, #0
 8001106:	42a6      	cmp	r6, r4
 8001108:	d105      	bne.n	8001116 <__libc_init_array+0x2e>
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001110:	4798      	blx	r3
 8001112:	3601      	adds	r6, #1
 8001114:	e7ee      	b.n	80010f4 <__libc_init_array+0xc>
 8001116:	f855 3b04 	ldr.w	r3, [r5], #4
 800111a:	4798      	blx	r3
 800111c:	3601      	adds	r6, #1
 800111e:	e7f2      	b.n	8001106 <__libc_init_array+0x1e>
 8001120:	08001b9c 	.word	0x08001b9c
 8001124:	08001b9c 	.word	0x08001b9c
 8001128:	08001b9c 	.word	0x08001b9c
 800112c:	08001ba0 	.word	0x08001ba0

08001130 <__retarget_lock_init_recursive>:
 8001130:	4770      	bx	lr

08001132 <__retarget_lock_acquire_recursive>:
 8001132:	4770      	bx	lr

08001134 <__retarget_lock_release_recursive>:
 8001134:	4770      	bx	lr
	...

08001138 <_free_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	4605      	mov	r5, r0
 800113c:	2900      	cmp	r1, #0
 800113e:	d041      	beq.n	80011c4 <_free_r+0x8c>
 8001140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001144:	1f0c      	subs	r4, r1, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	18e4      	addlt	r4, r4, r3
 800114c:	f7ff fe44 	bl	8000dd8 <__malloc_lock>
 8001150:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <_free_r+0x90>)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	b933      	cbnz	r3, 8001164 <_free_r+0x2c>
 8001156:	6063      	str	r3, [r4, #4]
 8001158:	6014      	str	r4, [r2, #0]
 800115a:	4628      	mov	r0, r5
 800115c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001160:	f7ff be40 	b.w	8000de4 <__malloc_unlock>
 8001164:	42a3      	cmp	r3, r4
 8001166:	d908      	bls.n	800117a <_free_r+0x42>
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	1821      	adds	r1, r4, r0
 800116c:	428b      	cmp	r3, r1
 800116e:	bf01      	itttt	eq
 8001170:	6819      	ldreq	r1, [r3, #0]
 8001172:	685b      	ldreq	r3, [r3, #4]
 8001174:	1809      	addeq	r1, r1, r0
 8001176:	6021      	streq	r1, [r4, #0]
 8001178:	e7ed      	b.n	8001156 <_free_r+0x1e>
 800117a:	461a      	mov	r2, r3
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	b10b      	cbz	r3, 8001184 <_free_r+0x4c>
 8001180:	42a3      	cmp	r3, r4
 8001182:	d9fa      	bls.n	800117a <_free_r+0x42>
 8001184:	6811      	ldr	r1, [r2, #0]
 8001186:	1850      	adds	r0, r2, r1
 8001188:	42a0      	cmp	r0, r4
 800118a:	d10b      	bne.n	80011a4 <_free_r+0x6c>
 800118c:	6820      	ldr	r0, [r4, #0]
 800118e:	4401      	add	r1, r0
 8001190:	1850      	adds	r0, r2, r1
 8001192:	4283      	cmp	r3, r0
 8001194:	6011      	str	r1, [r2, #0]
 8001196:	d1e0      	bne.n	800115a <_free_r+0x22>
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	6053      	str	r3, [r2, #4]
 800119e:	4408      	add	r0, r1
 80011a0:	6010      	str	r0, [r2, #0]
 80011a2:	e7da      	b.n	800115a <_free_r+0x22>
 80011a4:	d902      	bls.n	80011ac <_free_r+0x74>
 80011a6:	230c      	movs	r3, #12
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	e7d6      	b.n	800115a <_free_r+0x22>
 80011ac:	6820      	ldr	r0, [r4, #0]
 80011ae:	1821      	adds	r1, r4, r0
 80011b0:	428b      	cmp	r3, r1
 80011b2:	bf04      	itt	eq
 80011b4:	6819      	ldreq	r1, [r3, #0]
 80011b6:	685b      	ldreq	r3, [r3, #4]
 80011b8:	6063      	str	r3, [r4, #4]
 80011ba:	bf04      	itt	eq
 80011bc:	1809      	addeq	r1, r1, r0
 80011be:	6021      	streq	r1, [r4, #0]
 80011c0:	6054      	str	r4, [r2, #4]
 80011c2:	e7ca      	b.n	800115a <_free_r+0x22>
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	bf00      	nop
 80011c8:	20000138 	.word	0x20000138

080011cc <__sfputc_r>:
 80011cc:	6893      	ldr	r3, [r2, #8]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	b410      	push	{r4}
 80011d4:	6093      	str	r3, [r2, #8]
 80011d6:	da07      	bge.n	80011e8 <__sfputc_r+0x1c>
 80011d8:	6994      	ldr	r4, [r2, #24]
 80011da:	42a3      	cmp	r3, r4
 80011dc:	db01      	blt.n	80011e2 <__sfputc_r+0x16>
 80011de:	290a      	cmp	r1, #10
 80011e0:	d102      	bne.n	80011e8 <__sfputc_r+0x1c>
 80011e2:	bc10      	pop	{r4}
 80011e4:	f000 bb68 	b.w	80018b8 <__swbuf_r>
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	1c58      	adds	r0, r3, #1
 80011ec:	6010      	str	r0, [r2, #0]
 80011ee:	7019      	strb	r1, [r3, #0]
 80011f0:	4608      	mov	r0, r1
 80011f2:	bc10      	pop	{r4}
 80011f4:	4770      	bx	lr

080011f6 <__sfputs_r>:
 80011f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f8:	4606      	mov	r6, r0
 80011fa:	460f      	mov	r7, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	18d5      	adds	r5, r2, r3
 8001200:	42ac      	cmp	r4, r5
 8001202:	d101      	bne.n	8001208 <__sfputs_r+0x12>
 8001204:	2000      	movs	r0, #0
 8001206:	e007      	b.n	8001218 <__sfputs_r+0x22>
 8001208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800120c:	463a      	mov	r2, r7
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff ffdc 	bl	80011cc <__sfputc_r>
 8001214:	1c43      	adds	r3, r0, #1
 8001216:	d1f3      	bne.n	8001200 <__sfputs_r+0xa>
 8001218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800121c <_vfiprintf_r>:
 800121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001220:	460d      	mov	r5, r1
 8001222:	b09d      	sub	sp, #116	@ 0x74
 8001224:	4614      	mov	r4, r2
 8001226:	4698      	mov	r8, r3
 8001228:	4606      	mov	r6, r0
 800122a:	b118      	cbz	r0, 8001234 <_vfiprintf_r+0x18>
 800122c:	6a03      	ldr	r3, [r0, #32]
 800122e:	b90b      	cbnz	r3, 8001234 <_vfiprintf_r+0x18>
 8001230:	f7ff fe6a 	bl	8000f08 <__sinit>
 8001234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001236:	07d9      	lsls	r1, r3, #31
 8001238:	d405      	bmi.n	8001246 <_vfiprintf_r+0x2a>
 800123a:	89ab      	ldrh	r3, [r5, #12]
 800123c:	059a      	lsls	r2, r3, #22
 800123e:	d402      	bmi.n	8001246 <_vfiprintf_r+0x2a>
 8001240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001242:	f7ff ff76 	bl	8001132 <__retarget_lock_acquire_recursive>
 8001246:	89ab      	ldrh	r3, [r5, #12]
 8001248:	071b      	lsls	r3, r3, #28
 800124a:	d501      	bpl.n	8001250 <_vfiprintf_r+0x34>
 800124c:	692b      	ldr	r3, [r5, #16]
 800124e:	b99b      	cbnz	r3, 8001278 <_vfiprintf_r+0x5c>
 8001250:	4629      	mov	r1, r5
 8001252:	4630      	mov	r0, r6
 8001254:	f000 fb6e 	bl	8001934 <__swsetup_r>
 8001258:	b170      	cbz	r0, 8001278 <_vfiprintf_r+0x5c>
 800125a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800125c:	07dc      	lsls	r4, r3, #31
 800125e:	d504      	bpl.n	800126a <_vfiprintf_r+0x4e>
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	b01d      	add	sp, #116	@ 0x74
 8001266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800126a:	89ab      	ldrh	r3, [r5, #12]
 800126c:	0598      	lsls	r0, r3, #22
 800126e:	d4f7      	bmi.n	8001260 <_vfiprintf_r+0x44>
 8001270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001272:	f7ff ff5f 	bl	8001134 <__retarget_lock_release_recursive>
 8001276:	e7f3      	b.n	8001260 <_vfiprintf_r+0x44>
 8001278:	2300      	movs	r3, #0
 800127a:	9309      	str	r3, [sp, #36]	@ 0x24
 800127c:	2320      	movs	r3, #32
 800127e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001282:	f8cd 800c 	str.w	r8, [sp, #12]
 8001286:	2330      	movs	r3, #48	@ 0x30
 8001288:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001438 <_vfiprintf_r+0x21c>
 800128c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001290:	f04f 0901 	mov.w	r9, #1
 8001294:	4623      	mov	r3, r4
 8001296:	469a      	mov	sl, r3
 8001298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800129c:	b10a      	cbz	r2, 80012a2 <_vfiprintf_r+0x86>
 800129e:	2a25      	cmp	r2, #37	@ 0x25
 80012a0:	d1f9      	bne.n	8001296 <_vfiprintf_r+0x7a>
 80012a2:	ebba 0b04 	subs.w	fp, sl, r4
 80012a6:	d00b      	beq.n	80012c0 <_vfiprintf_r+0xa4>
 80012a8:	465b      	mov	r3, fp
 80012aa:	4622      	mov	r2, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff ffa1 	bl	80011f6 <__sfputs_r>
 80012b4:	3001      	adds	r0, #1
 80012b6:	f000 80a7 	beq.w	8001408 <_vfiprintf_r+0x1ec>
 80012ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80012bc:	445a      	add	r2, fp
 80012be:	9209      	str	r2, [sp, #36]	@ 0x24
 80012c0:	f89a 3000 	ldrb.w	r3, [sl]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 809f 	beq.w	8001408 <_vfiprintf_r+0x1ec>
 80012ca:	2300      	movs	r3, #0
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012d4:	f10a 0a01 	add.w	sl, sl, #1
 80012d8:	9304      	str	r3, [sp, #16]
 80012da:	9307      	str	r3, [sp, #28]
 80012dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80012e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80012e2:	4654      	mov	r4, sl
 80012e4:	2205      	movs	r2, #5
 80012e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012ea:	4853      	ldr	r0, [pc, #332]	@ (8001438 <_vfiprintf_r+0x21c>)
 80012ec:	f7fe ff90 	bl	8000210 <memchr>
 80012f0:	9a04      	ldr	r2, [sp, #16]
 80012f2:	b9d8      	cbnz	r0, 800132c <_vfiprintf_r+0x110>
 80012f4:	06d1      	lsls	r1, r2, #27
 80012f6:	bf44      	itt	mi
 80012f8:	2320      	movmi	r3, #32
 80012fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012fe:	0713      	lsls	r3, r2, #28
 8001300:	bf44      	itt	mi
 8001302:	232b      	movmi	r3, #43	@ 0x2b
 8001304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001308:	f89a 3000 	ldrb.w	r3, [sl]
 800130c:	2b2a      	cmp	r3, #42	@ 0x2a
 800130e:	d015      	beq.n	800133c <_vfiprintf_r+0x120>
 8001310:	9a07      	ldr	r2, [sp, #28]
 8001312:	4654      	mov	r4, sl
 8001314:	2000      	movs	r0, #0
 8001316:	f04f 0c0a 	mov.w	ip, #10
 800131a:	4621      	mov	r1, r4
 800131c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001320:	3b30      	subs	r3, #48	@ 0x30
 8001322:	2b09      	cmp	r3, #9
 8001324:	d94b      	bls.n	80013be <_vfiprintf_r+0x1a2>
 8001326:	b1b0      	cbz	r0, 8001356 <_vfiprintf_r+0x13a>
 8001328:	9207      	str	r2, [sp, #28]
 800132a:	e014      	b.n	8001356 <_vfiprintf_r+0x13a>
 800132c:	eba0 0308 	sub.w	r3, r0, r8
 8001330:	fa09 f303 	lsl.w	r3, r9, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	9304      	str	r3, [sp, #16]
 8001338:	46a2      	mov	sl, r4
 800133a:	e7d2      	b.n	80012e2 <_vfiprintf_r+0xc6>
 800133c:	9b03      	ldr	r3, [sp, #12]
 800133e:	1d19      	adds	r1, r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	9103      	str	r1, [sp, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bfbb      	ittet	lt
 8001348:	425b      	neglt	r3, r3
 800134a:	f042 0202 	orrlt.w	r2, r2, #2
 800134e:	9307      	strge	r3, [sp, #28]
 8001350:	9307      	strlt	r3, [sp, #28]
 8001352:	bfb8      	it	lt
 8001354:	9204      	strlt	r2, [sp, #16]
 8001356:	7823      	ldrb	r3, [r4, #0]
 8001358:	2b2e      	cmp	r3, #46	@ 0x2e
 800135a:	d10a      	bne.n	8001372 <_vfiprintf_r+0x156>
 800135c:	7863      	ldrb	r3, [r4, #1]
 800135e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001360:	d132      	bne.n	80013c8 <_vfiprintf_r+0x1ac>
 8001362:	9b03      	ldr	r3, [sp, #12]
 8001364:	1d1a      	adds	r2, r3, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	9203      	str	r2, [sp, #12]
 800136a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800136e:	3402      	adds	r4, #2
 8001370:	9305      	str	r3, [sp, #20]
 8001372:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800143c <_vfiprintf_r+0x220>
 8001376:	7821      	ldrb	r1, [r4, #0]
 8001378:	2203      	movs	r2, #3
 800137a:	4650      	mov	r0, sl
 800137c:	f7fe ff48 	bl	8000210 <memchr>
 8001380:	b138      	cbz	r0, 8001392 <_vfiprintf_r+0x176>
 8001382:	9b04      	ldr	r3, [sp, #16]
 8001384:	eba0 000a 	sub.w	r0, r0, sl
 8001388:	2240      	movs	r2, #64	@ 0x40
 800138a:	4082      	lsls	r2, r0
 800138c:	4313      	orrs	r3, r2
 800138e:	3401      	adds	r4, #1
 8001390:	9304      	str	r3, [sp, #16]
 8001392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001396:	482a      	ldr	r0, [pc, #168]	@ (8001440 <_vfiprintf_r+0x224>)
 8001398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800139c:	2206      	movs	r2, #6
 800139e:	f7fe ff37 	bl	8000210 <memchr>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d03f      	beq.n	8001426 <_vfiprintf_r+0x20a>
 80013a6:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <_vfiprintf_r+0x228>)
 80013a8:	bb1b      	cbnz	r3, 80013f2 <_vfiprintf_r+0x1d6>
 80013aa:	9b03      	ldr	r3, [sp, #12]
 80013ac:	3307      	adds	r3, #7
 80013ae:	f023 0307 	bic.w	r3, r3, #7
 80013b2:	3308      	adds	r3, #8
 80013b4:	9303      	str	r3, [sp, #12]
 80013b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80013b8:	443b      	add	r3, r7
 80013ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80013bc:	e76a      	b.n	8001294 <_vfiprintf_r+0x78>
 80013be:	fb0c 3202 	mla	r2, ip, r2, r3
 80013c2:	460c      	mov	r4, r1
 80013c4:	2001      	movs	r0, #1
 80013c6:	e7a8      	b.n	800131a <_vfiprintf_r+0xfe>
 80013c8:	2300      	movs	r3, #0
 80013ca:	3401      	adds	r4, #1
 80013cc:	9305      	str	r3, [sp, #20]
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 0c0a 	mov.w	ip, #10
 80013d4:	4620      	mov	r0, r4
 80013d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013da:	3a30      	subs	r2, #48	@ 0x30
 80013dc:	2a09      	cmp	r2, #9
 80013de:	d903      	bls.n	80013e8 <_vfiprintf_r+0x1cc>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0c6      	beq.n	8001372 <_vfiprintf_r+0x156>
 80013e4:	9105      	str	r1, [sp, #20]
 80013e6:	e7c4      	b.n	8001372 <_vfiprintf_r+0x156>
 80013e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80013ec:	4604      	mov	r4, r0
 80013ee:	2301      	movs	r3, #1
 80013f0:	e7f0      	b.n	80013d4 <_vfiprintf_r+0x1b8>
 80013f2:	ab03      	add	r3, sp, #12
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	462a      	mov	r2, r5
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <_vfiprintf_r+0x22c>)
 80013fa:	a904      	add	r1, sp, #16
 80013fc:	4630      	mov	r0, r6
 80013fe:	f3af 8000 	nop.w
 8001402:	4607      	mov	r7, r0
 8001404:	1c78      	adds	r0, r7, #1
 8001406:	d1d6      	bne.n	80013b6 <_vfiprintf_r+0x19a>
 8001408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800140a:	07d9      	lsls	r1, r3, #31
 800140c:	d405      	bmi.n	800141a <_vfiprintf_r+0x1fe>
 800140e:	89ab      	ldrh	r3, [r5, #12]
 8001410:	059a      	lsls	r2, r3, #22
 8001412:	d402      	bmi.n	800141a <_vfiprintf_r+0x1fe>
 8001414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001416:	f7ff fe8d 	bl	8001134 <__retarget_lock_release_recursive>
 800141a:	89ab      	ldrh	r3, [r5, #12]
 800141c:	065b      	lsls	r3, r3, #25
 800141e:	f53f af1f 	bmi.w	8001260 <_vfiprintf_r+0x44>
 8001422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001424:	e71e      	b.n	8001264 <_vfiprintf_r+0x48>
 8001426:	ab03      	add	r3, sp, #12
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	462a      	mov	r2, r5
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <_vfiprintf_r+0x22c>)
 800142e:	a904      	add	r1, sp, #16
 8001430:	4630      	mov	r0, r6
 8001432:	f000 f879 	bl	8001528 <_printf_i>
 8001436:	e7e4      	b.n	8001402 <_vfiprintf_r+0x1e6>
 8001438:	08001b5e 	.word	0x08001b5e
 800143c:	08001b64 	.word	0x08001b64
 8001440:	08001b68 	.word	0x08001b68
 8001444:	00000000 	.word	0x00000000
 8001448:	080011f7 	.word	0x080011f7

0800144c <_printf_common>:
 800144c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001450:	4616      	mov	r6, r2
 8001452:	4698      	mov	r8, r3
 8001454:	688a      	ldr	r2, [r1, #8]
 8001456:	690b      	ldr	r3, [r1, #16]
 8001458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800145c:	4293      	cmp	r3, r2
 800145e:	bfb8      	it	lt
 8001460:	4613      	movlt	r3, r2
 8001462:	6033      	str	r3, [r6, #0]
 8001464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001468:	4607      	mov	r7, r0
 800146a:	460c      	mov	r4, r1
 800146c:	b10a      	cbz	r2, 8001472 <_printf_common+0x26>
 800146e:	3301      	adds	r3, #1
 8001470:	6033      	str	r3, [r6, #0]
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	0699      	lsls	r1, r3, #26
 8001476:	bf42      	ittt	mi
 8001478:	6833      	ldrmi	r3, [r6, #0]
 800147a:	3302      	addmi	r3, #2
 800147c:	6033      	strmi	r3, [r6, #0]
 800147e:	6825      	ldr	r5, [r4, #0]
 8001480:	f015 0506 	ands.w	r5, r5, #6
 8001484:	d106      	bne.n	8001494 <_printf_common+0x48>
 8001486:	f104 0a19 	add.w	sl, r4, #25
 800148a:	68e3      	ldr	r3, [r4, #12]
 800148c:	6832      	ldr	r2, [r6, #0]
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	42ab      	cmp	r3, r5
 8001492:	dc26      	bgt.n	80014e2 <_printf_common+0x96>
 8001494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001498:	6822      	ldr	r2, [r4, #0]
 800149a:	3b00      	subs	r3, #0
 800149c:	bf18      	it	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	0692      	lsls	r2, r2, #26
 80014a2:	d42b      	bmi.n	80014fc <_printf_common+0xb0>
 80014a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80014a8:	4641      	mov	r1, r8
 80014aa:	4638      	mov	r0, r7
 80014ac:	47c8      	blx	r9
 80014ae:	3001      	adds	r0, #1
 80014b0:	d01e      	beq.n	80014f0 <_printf_common+0xa4>
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	6922      	ldr	r2, [r4, #16]
 80014b6:	f003 0306 	and.w	r3, r3, #6
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf02      	ittt	eq
 80014be:	68e5      	ldreq	r5, [r4, #12]
 80014c0:	6833      	ldreq	r3, [r6, #0]
 80014c2:	1aed      	subeq	r5, r5, r3
 80014c4:	68a3      	ldr	r3, [r4, #8]
 80014c6:	bf0c      	ite	eq
 80014c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014cc:	2500      	movne	r5, #0
 80014ce:	4293      	cmp	r3, r2
 80014d0:	bfc4      	itt	gt
 80014d2:	1a9b      	subgt	r3, r3, r2
 80014d4:	18ed      	addgt	r5, r5, r3
 80014d6:	2600      	movs	r6, #0
 80014d8:	341a      	adds	r4, #26
 80014da:	42b5      	cmp	r5, r6
 80014dc:	d11a      	bne.n	8001514 <_printf_common+0xc8>
 80014de:	2000      	movs	r0, #0
 80014e0:	e008      	b.n	80014f4 <_printf_common+0xa8>
 80014e2:	2301      	movs	r3, #1
 80014e4:	4652      	mov	r2, sl
 80014e6:	4641      	mov	r1, r8
 80014e8:	4638      	mov	r0, r7
 80014ea:	47c8      	blx	r9
 80014ec:	3001      	adds	r0, #1
 80014ee:	d103      	bne.n	80014f8 <_printf_common+0xac>
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f8:	3501      	adds	r5, #1
 80014fa:	e7c6      	b.n	800148a <_printf_common+0x3e>
 80014fc:	18e1      	adds	r1, r4, r3
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	2030      	movs	r0, #48	@ 0x30
 8001502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001506:	4422      	add	r2, r4
 8001508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800150c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001510:	3302      	adds	r3, #2
 8001512:	e7c7      	b.n	80014a4 <_printf_common+0x58>
 8001514:	2301      	movs	r3, #1
 8001516:	4622      	mov	r2, r4
 8001518:	4641      	mov	r1, r8
 800151a:	4638      	mov	r0, r7
 800151c:	47c8      	blx	r9
 800151e:	3001      	adds	r0, #1
 8001520:	d0e6      	beq.n	80014f0 <_printf_common+0xa4>
 8001522:	3601      	adds	r6, #1
 8001524:	e7d9      	b.n	80014da <_printf_common+0x8e>
	...

08001528 <_printf_i>:
 8001528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800152c:	7e0f      	ldrb	r7, [r1, #24]
 800152e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001530:	2f78      	cmp	r7, #120	@ 0x78
 8001532:	4691      	mov	r9, r2
 8001534:	4680      	mov	r8, r0
 8001536:	460c      	mov	r4, r1
 8001538:	469a      	mov	sl, r3
 800153a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800153e:	d807      	bhi.n	8001550 <_printf_i+0x28>
 8001540:	2f62      	cmp	r7, #98	@ 0x62
 8001542:	d80a      	bhi.n	800155a <_printf_i+0x32>
 8001544:	2f00      	cmp	r7, #0
 8001546:	f000 80d2 	beq.w	80016ee <_printf_i+0x1c6>
 800154a:	2f58      	cmp	r7, #88	@ 0x58
 800154c:	f000 80b9 	beq.w	80016c2 <_printf_i+0x19a>
 8001550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001558:	e03a      	b.n	80015d0 <_printf_i+0xa8>
 800155a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800155e:	2b15      	cmp	r3, #21
 8001560:	d8f6      	bhi.n	8001550 <_printf_i+0x28>
 8001562:	a101      	add	r1, pc, #4	@ (adr r1, 8001568 <_printf_i+0x40>)
 8001564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001568:	080015c1 	.word	0x080015c1
 800156c:	080015d5 	.word	0x080015d5
 8001570:	08001551 	.word	0x08001551
 8001574:	08001551 	.word	0x08001551
 8001578:	08001551 	.word	0x08001551
 800157c:	08001551 	.word	0x08001551
 8001580:	080015d5 	.word	0x080015d5
 8001584:	08001551 	.word	0x08001551
 8001588:	08001551 	.word	0x08001551
 800158c:	08001551 	.word	0x08001551
 8001590:	08001551 	.word	0x08001551
 8001594:	080016d5 	.word	0x080016d5
 8001598:	080015ff 	.word	0x080015ff
 800159c:	0800168f 	.word	0x0800168f
 80015a0:	08001551 	.word	0x08001551
 80015a4:	08001551 	.word	0x08001551
 80015a8:	080016f7 	.word	0x080016f7
 80015ac:	08001551 	.word	0x08001551
 80015b0:	080015ff 	.word	0x080015ff
 80015b4:	08001551 	.word	0x08001551
 80015b8:	08001551 	.word	0x08001551
 80015bc:	08001697 	.word	0x08001697
 80015c0:	6833      	ldr	r3, [r6, #0]
 80015c2:	1d1a      	adds	r2, r3, #4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6032      	str	r2, [r6, #0]
 80015c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80015d0:	2301      	movs	r3, #1
 80015d2:	e09d      	b.n	8001710 <_printf_i+0x1e8>
 80015d4:	6833      	ldr	r3, [r6, #0]
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	1d19      	adds	r1, r3, #4
 80015da:	6031      	str	r1, [r6, #0]
 80015dc:	0606      	lsls	r6, r0, #24
 80015de:	d501      	bpl.n	80015e4 <_printf_i+0xbc>
 80015e0:	681d      	ldr	r5, [r3, #0]
 80015e2:	e003      	b.n	80015ec <_printf_i+0xc4>
 80015e4:	0645      	lsls	r5, r0, #25
 80015e6:	d5fb      	bpl.n	80015e0 <_printf_i+0xb8>
 80015e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015ec:	2d00      	cmp	r5, #0
 80015ee:	da03      	bge.n	80015f8 <_printf_i+0xd0>
 80015f0:	232d      	movs	r3, #45	@ 0x2d
 80015f2:	426d      	negs	r5, r5
 80015f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015f8:	4859      	ldr	r0, [pc, #356]	@ (8001760 <_printf_i+0x238>)
 80015fa:	230a      	movs	r3, #10
 80015fc:	e011      	b.n	8001622 <_printf_i+0xfa>
 80015fe:	6821      	ldr	r1, [r4, #0]
 8001600:	6833      	ldr	r3, [r6, #0]
 8001602:	0608      	lsls	r0, r1, #24
 8001604:	f853 5b04 	ldr.w	r5, [r3], #4
 8001608:	d402      	bmi.n	8001610 <_printf_i+0xe8>
 800160a:	0649      	lsls	r1, r1, #25
 800160c:	bf48      	it	mi
 800160e:	b2ad      	uxthmi	r5, r5
 8001610:	2f6f      	cmp	r7, #111	@ 0x6f
 8001612:	4853      	ldr	r0, [pc, #332]	@ (8001760 <_printf_i+0x238>)
 8001614:	6033      	str	r3, [r6, #0]
 8001616:	bf14      	ite	ne
 8001618:	230a      	movne	r3, #10
 800161a:	2308      	moveq	r3, #8
 800161c:	2100      	movs	r1, #0
 800161e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001622:	6866      	ldr	r6, [r4, #4]
 8001624:	60a6      	str	r6, [r4, #8]
 8001626:	2e00      	cmp	r6, #0
 8001628:	bfa2      	ittt	ge
 800162a:	6821      	ldrge	r1, [r4, #0]
 800162c:	f021 0104 	bicge.w	r1, r1, #4
 8001630:	6021      	strge	r1, [r4, #0]
 8001632:	b90d      	cbnz	r5, 8001638 <_printf_i+0x110>
 8001634:	2e00      	cmp	r6, #0
 8001636:	d04b      	beq.n	80016d0 <_printf_i+0x1a8>
 8001638:	4616      	mov	r6, r2
 800163a:	fbb5 f1f3 	udiv	r1, r5, r3
 800163e:	fb03 5711 	mls	r7, r3, r1, r5
 8001642:	5dc7      	ldrb	r7, [r0, r7]
 8001644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001648:	462f      	mov	r7, r5
 800164a:	42bb      	cmp	r3, r7
 800164c:	460d      	mov	r5, r1
 800164e:	d9f4      	bls.n	800163a <_printf_i+0x112>
 8001650:	2b08      	cmp	r3, #8
 8001652:	d10b      	bne.n	800166c <_printf_i+0x144>
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	07df      	lsls	r7, r3, #31
 8001658:	d508      	bpl.n	800166c <_printf_i+0x144>
 800165a:	6923      	ldr	r3, [r4, #16]
 800165c:	6861      	ldr	r1, [r4, #4]
 800165e:	4299      	cmp	r1, r3
 8001660:	bfde      	ittt	le
 8001662:	2330      	movle	r3, #48	@ 0x30
 8001664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001668:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800166c:	1b92      	subs	r2, r2, r6
 800166e:	6122      	str	r2, [r4, #16]
 8001670:	f8cd a000 	str.w	sl, [sp]
 8001674:	464b      	mov	r3, r9
 8001676:	aa03      	add	r2, sp, #12
 8001678:	4621      	mov	r1, r4
 800167a:	4640      	mov	r0, r8
 800167c:	f7ff fee6 	bl	800144c <_printf_common>
 8001680:	3001      	adds	r0, #1
 8001682:	d14a      	bne.n	800171a <_printf_i+0x1f2>
 8001684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001688:	b004      	add	sp, #16
 800168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	4833      	ldr	r0, [pc, #204]	@ (8001764 <_printf_i+0x23c>)
 8001698:	2778      	movs	r7, #120	@ 0x78
 800169a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	6831      	ldr	r1, [r6, #0]
 80016a2:	061f      	lsls	r7, r3, #24
 80016a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80016a8:	d402      	bmi.n	80016b0 <_printf_i+0x188>
 80016aa:	065f      	lsls	r7, r3, #25
 80016ac:	bf48      	it	mi
 80016ae:	b2ad      	uxthmi	r5, r5
 80016b0:	6031      	str	r1, [r6, #0]
 80016b2:	07d9      	lsls	r1, r3, #31
 80016b4:	bf44      	itt	mi
 80016b6:	f043 0320 	orrmi.w	r3, r3, #32
 80016ba:	6023      	strmi	r3, [r4, #0]
 80016bc:	b11d      	cbz	r5, 80016c6 <_printf_i+0x19e>
 80016be:	2310      	movs	r3, #16
 80016c0:	e7ac      	b.n	800161c <_printf_i+0xf4>
 80016c2:	4827      	ldr	r0, [pc, #156]	@ (8001760 <_printf_i+0x238>)
 80016c4:	e7e9      	b.n	800169a <_printf_i+0x172>
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	f023 0320 	bic.w	r3, r3, #32
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	e7f6      	b.n	80016be <_printf_i+0x196>
 80016d0:	4616      	mov	r6, r2
 80016d2:	e7bd      	b.n	8001650 <_printf_i+0x128>
 80016d4:	6833      	ldr	r3, [r6, #0]
 80016d6:	6825      	ldr	r5, [r4, #0]
 80016d8:	6961      	ldr	r1, [r4, #20]
 80016da:	1d18      	adds	r0, r3, #4
 80016dc:	6030      	str	r0, [r6, #0]
 80016de:	062e      	lsls	r6, r5, #24
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	d501      	bpl.n	80016e8 <_printf_i+0x1c0>
 80016e4:	6019      	str	r1, [r3, #0]
 80016e6:	e002      	b.n	80016ee <_printf_i+0x1c6>
 80016e8:	0668      	lsls	r0, r5, #25
 80016ea:	d5fb      	bpl.n	80016e4 <_printf_i+0x1bc>
 80016ec:	8019      	strh	r1, [r3, #0]
 80016ee:	2300      	movs	r3, #0
 80016f0:	6123      	str	r3, [r4, #16]
 80016f2:	4616      	mov	r6, r2
 80016f4:	e7bc      	b.n	8001670 <_printf_i+0x148>
 80016f6:	6833      	ldr	r3, [r6, #0]
 80016f8:	1d1a      	adds	r2, r3, #4
 80016fa:	6032      	str	r2, [r6, #0]
 80016fc:	681e      	ldr	r6, [r3, #0]
 80016fe:	6862      	ldr	r2, [r4, #4]
 8001700:	2100      	movs	r1, #0
 8001702:	4630      	mov	r0, r6
 8001704:	f7fe fd84 	bl	8000210 <memchr>
 8001708:	b108      	cbz	r0, 800170e <_printf_i+0x1e6>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	6060      	str	r0, [r4, #4]
 800170e:	6863      	ldr	r3, [r4, #4]
 8001710:	6123      	str	r3, [r4, #16]
 8001712:	2300      	movs	r3, #0
 8001714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001718:	e7aa      	b.n	8001670 <_printf_i+0x148>
 800171a:	6923      	ldr	r3, [r4, #16]
 800171c:	4632      	mov	r2, r6
 800171e:	4649      	mov	r1, r9
 8001720:	4640      	mov	r0, r8
 8001722:	47d0      	blx	sl
 8001724:	3001      	adds	r0, #1
 8001726:	d0ad      	beq.n	8001684 <_printf_i+0x15c>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	079b      	lsls	r3, r3, #30
 800172c:	d413      	bmi.n	8001756 <_printf_i+0x22e>
 800172e:	68e0      	ldr	r0, [r4, #12]
 8001730:	9b03      	ldr	r3, [sp, #12]
 8001732:	4298      	cmp	r0, r3
 8001734:	bfb8      	it	lt
 8001736:	4618      	movlt	r0, r3
 8001738:	e7a6      	b.n	8001688 <_printf_i+0x160>
 800173a:	2301      	movs	r3, #1
 800173c:	4632      	mov	r2, r6
 800173e:	4649      	mov	r1, r9
 8001740:	4640      	mov	r0, r8
 8001742:	47d0      	blx	sl
 8001744:	3001      	adds	r0, #1
 8001746:	d09d      	beq.n	8001684 <_printf_i+0x15c>
 8001748:	3501      	adds	r5, #1
 800174a:	68e3      	ldr	r3, [r4, #12]
 800174c:	9903      	ldr	r1, [sp, #12]
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	42ab      	cmp	r3, r5
 8001752:	dcf2      	bgt.n	800173a <_printf_i+0x212>
 8001754:	e7eb      	b.n	800172e <_printf_i+0x206>
 8001756:	2500      	movs	r5, #0
 8001758:	f104 0619 	add.w	r6, r4, #25
 800175c:	e7f5      	b.n	800174a <_printf_i+0x222>
 800175e:	bf00      	nop
 8001760:	08001b6f 	.word	0x08001b6f
 8001764:	08001b80 	.word	0x08001b80

08001768 <__sflush_r>:
 8001768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176e:	0716      	lsls	r6, r2, #28
 8001770:	4605      	mov	r5, r0
 8001772:	460c      	mov	r4, r1
 8001774:	d454      	bmi.n	8001820 <__sflush_r+0xb8>
 8001776:	684b      	ldr	r3, [r1, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	dc02      	bgt.n	8001782 <__sflush_r+0x1a>
 800177c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	dd48      	ble.n	8001814 <__sflush_r+0xac>
 8001782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001784:	2e00      	cmp	r6, #0
 8001786:	d045      	beq.n	8001814 <__sflush_r+0xac>
 8001788:	2300      	movs	r3, #0
 800178a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800178e:	682f      	ldr	r7, [r5, #0]
 8001790:	6a21      	ldr	r1, [r4, #32]
 8001792:	602b      	str	r3, [r5, #0]
 8001794:	d030      	beq.n	80017f8 <__sflush_r+0x90>
 8001796:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001798:	89a3      	ldrh	r3, [r4, #12]
 800179a:	0759      	lsls	r1, r3, #29
 800179c:	d505      	bpl.n	80017aa <__sflush_r+0x42>
 800179e:	6863      	ldr	r3, [r4, #4]
 80017a0:	1ad2      	subs	r2, r2, r3
 80017a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80017a4:	b10b      	cbz	r3, 80017aa <__sflush_r+0x42>
 80017a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017a8:	1ad2      	subs	r2, r2, r3
 80017aa:	2300      	movs	r3, #0
 80017ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80017ae:	6a21      	ldr	r1, [r4, #32]
 80017b0:	4628      	mov	r0, r5
 80017b2:	47b0      	blx	r6
 80017b4:	1c43      	adds	r3, r0, #1
 80017b6:	89a3      	ldrh	r3, [r4, #12]
 80017b8:	d106      	bne.n	80017c8 <__sflush_r+0x60>
 80017ba:	6829      	ldr	r1, [r5, #0]
 80017bc:	291d      	cmp	r1, #29
 80017be:	d82b      	bhi.n	8001818 <__sflush_r+0xb0>
 80017c0:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <__sflush_r+0xfc>)
 80017c2:	410a      	asrs	r2, r1
 80017c4:	07d6      	lsls	r6, r2, #31
 80017c6:	d427      	bmi.n	8001818 <__sflush_r+0xb0>
 80017c8:	2200      	movs	r2, #0
 80017ca:	6062      	str	r2, [r4, #4]
 80017cc:	04d9      	lsls	r1, r3, #19
 80017ce:	6922      	ldr	r2, [r4, #16]
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	d504      	bpl.n	80017de <__sflush_r+0x76>
 80017d4:	1c42      	adds	r2, r0, #1
 80017d6:	d101      	bne.n	80017dc <__sflush_r+0x74>
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	b903      	cbnz	r3, 80017de <__sflush_r+0x76>
 80017dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80017de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017e0:	602f      	str	r7, [r5, #0]
 80017e2:	b1b9      	cbz	r1, 8001814 <__sflush_r+0xac>
 80017e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017e8:	4299      	cmp	r1, r3
 80017ea:	d002      	beq.n	80017f2 <__sflush_r+0x8a>
 80017ec:	4628      	mov	r0, r5
 80017ee:	f7ff fca3 	bl	8001138 <_free_r>
 80017f2:	2300      	movs	r3, #0
 80017f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80017f6:	e00d      	b.n	8001814 <__sflush_r+0xac>
 80017f8:	2301      	movs	r3, #1
 80017fa:	4628      	mov	r0, r5
 80017fc:	47b0      	blx	r6
 80017fe:	4602      	mov	r2, r0
 8001800:	1c50      	adds	r0, r2, #1
 8001802:	d1c9      	bne.n	8001798 <__sflush_r+0x30>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0c6      	beq.n	8001798 <__sflush_r+0x30>
 800180a:	2b1d      	cmp	r3, #29
 800180c:	d001      	beq.n	8001812 <__sflush_r+0xaa>
 800180e:	2b16      	cmp	r3, #22
 8001810:	d11d      	bne.n	800184e <__sflush_r+0xe6>
 8001812:	602f      	str	r7, [r5, #0]
 8001814:	2000      	movs	r0, #0
 8001816:	e021      	b.n	800185c <__sflush_r+0xf4>
 8001818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800181c:	b21b      	sxth	r3, r3
 800181e:	e01a      	b.n	8001856 <__sflush_r+0xee>
 8001820:	690f      	ldr	r7, [r1, #16]
 8001822:	2f00      	cmp	r7, #0
 8001824:	d0f6      	beq.n	8001814 <__sflush_r+0xac>
 8001826:	0793      	lsls	r3, r2, #30
 8001828:	680e      	ldr	r6, [r1, #0]
 800182a:	bf08      	it	eq
 800182c:	694b      	ldreq	r3, [r1, #20]
 800182e:	600f      	str	r7, [r1, #0]
 8001830:	bf18      	it	ne
 8001832:	2300      	movne	r3, #0
 8001834:	1bf6      	subs	r6, r6, r7
 8001836:	608b      	str	r3, [r1, #8]
 8001838:	2e00      	cmp	r6, #0
 800183a:	ddeb      	ble.n	8001814 <__sflush_r+0xac>
 800183c:	6a21      	ldr	r1, [r4, #32]
 800183e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001842:	4633      	mov	r3, r6
 8001844:	463a      	mov	r2, r7
 8001846:	4628      	mov	r0, r5
 8001848:	47e0      	blx	ip
 800184a:	2800      	cmp	r0, #0
 800184c:	dc07      	bgt.n	800185e <__sflush_r+0xf6>
 800184e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001856:	81a3      	strh	r3, [r4, #12]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800185e:	4407      	add	r7, r0
 8001860:	1a36      	subs	r6, r6, r0
 8001862:	e7e9      	b.n	8001838 <__sflush_r+0xd0>
 8001864:	dfbffffe 	.word	0xdfbffffe

08001868 <_fflush_r>:
 8001868:	b538      	push	{r3, r4, r5, lr}
 800186a:	690b      	ldr	r3, [r1, #16]
 800186c:	4605      	mov	r5, r0
 800186e:	460c      	mov	r4, r1
 8001870:	b913      	cbnz	r3, 8001878 <_fflush_r+0x10>
 8001872:	2500      	movs	r5, #0
 8001874:	4628      	mov	r0, r5
 8001876:	bd38      	pop	{r3, r4, r5, pc}
 8001878:	b118      	cbz	r0, 8001882 <_fflush_r+0x1a>
 800187a:	6a03      	ldr	r3, [r0, #32]
 800187c:	b90b      	cbnz	r3, 8001882 <_fflush_r+0x1a>
 800187e:	f7ff fb43 	bl	8000f08 <__sinit>
 8001882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f3      	beq.n	8001872 <_fflush_r+0xa>
 800188a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800188c:	07d0      	lsls	r0, r2, #31
 800188e:	d404      	bmi.n	800189a <_fflush_r+0x32>
 8001890:	0599      	lsls	r1, r3, #22
 8001892:	d402      	bmi.n	800189a <_fflush_r+0x32>
 8001894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001896:	f7ff fc4c 	bl	8001132 <__retarget_lock_acquire_recursive>
 800189a:	4628      	mov	r0, r5
 800189c:	4621      	mov	r1, r4
 800189e:	f7ff ff63 	bl	8001768 <__sflush_r>
 80018a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018a4:	07da      	lsls	r2, r3, #31
 80018a6:	4605      	mov	r5, r0
 80018a8:	d4e4      	bmi.n	8001874 <_fflush_r+0xc>
 80018aa:	89a3      	ldrh	r3, [r4, #12]
 80018ac:	059b      	lsls	r3, r3, #22
 80018ae:	d4e1      	bmi.n	8001874 <_fflush_r+0xc>
 80018b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018b2:	f7ff fc3f 	bl	8001134 <__retarget_lock_release_recursive>
 80018b6:	e7dd      	b.n	8001874 <_fflush_r+0xc>

080018b8 <__swbuf_r>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	460e      	mov	r6, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	4605      	mov	r5, r0
 80018c0:	b118      	cbz	r0, 80018ca <__swbuf_r+0x12>
 80018c2:	6a03      	ldr	r3, [r0, #32]
 80018c4:	b90b      	cbnz	r3, 80018ca <__swbuf_r+0x12>
 80018c6:	f7ff fb1f 	bl	8000f08 <__sinit>
 80018ca:	69a3      	ldr	r3, [r4, #24]
 80018cc:	60a3      	str	r3, [r4, #8]
 80018ce:	89a3      	ldrh	r3, [r4, #12]
 80018d0:	071a      	lsls	r2, r3, #28
 80018d2:	d501      	bpl.n	80018d8 <__swbuf_r+0x20>
 80018d4:	6923      	ldr	r3, [r4, #16]
 80018d6:	b943      	cbnz	r3, 80018ea <__swbuf_r+0x32>
 80018d8:	4621      	mov	r1, r4
 80018da:	4628      	mov	r0, r5
 80018dc:	f000 f82a 	bl	8001934 <__swsetup_r>
 80018e0:	b118      	cbz	r0, 80018ea <__swbuf_r+0x32>
 80018e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80018e6:	4638      	mov	r0, r7
 80018e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	6922      	ldr	r2, [r4, #16]
 80018ee:	1a98      	subs	r0, r3, r2
 80018f0:	6963      	ldr	r3, [r4, #20]
 80018f2:	b2f6      	uxtb	r6, r6
 80018f4:	4283      	cmp	r3, r0
 80018f6:	4637      	mov	r7, r6
 80018f8:	dc05      	bgt.n	8001906 <__swbuf_r+0x4e>
 80018fa:	4621      	mov	r1, r4
 80018fc:	4628      	mov	r0, r5
 80018fe:	f7ff ffb3 	bl	8001868 <_fflush_r>
 8001902:	2800      	cmp	r0, #0
 8001904:	d1ed      	bne.n	80018e2 <__swbuf_r+0x2a>
 8001906:	68a3      	ldr	r3, [r4, #8]
 8001908:	3b01      	subs	r3, #1
 800190a:	60a3      	str	r3, [r4, #8]
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	6022      	str	r2, [r4, #0]
 8001912:	701e      	strb	r6, [r3, #0]
 8001914:	6962      	ldr	r2, [r4, #20]
 8001916:	1c43      	adds	r3, r0, #1
 8001918:	429a      	cmp	r2, r3
 800191a:	d004      	beq.n	8001926 <__swbuf_r+0x6e>
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	07db      	lsls	r3, r3, #31
 8001920:	d5e1      	bpl.n	80018e6 <__swbuf_r+0x2e>
 8001922:	2e0a      	cmp	r6, #10
 8001924:	d1df      	bne.n	80018e6 <__swbuf_r+0x2e>
 8001926:	4621      	mov	r1, r4
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff ff9d 	bl	8001868 <_fflush_r>
 800192e:	2800      	cmp	r0, #0
 8001930:	d0d9      	beq.n	80018e6 <__swbuf_r+0x2e>
 8001932:	e7d6      	b.n	80018e2 <__swbuf_r+0x2a>

08001934 <__swsetup_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <__swsetup_r+0xa8>)
 8001938:	4605      	mov	r5, r0
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	460c      	mov	r4, r1
 800193e:	b118      	cbz	r0, 8001948 <__swsetup_r+0x14>
 8001940:	6a03      	ldr	r3, [r0, #32]
 8001942:	b90b      	cbnz	r3, 8001948 <__swsetup_r+0x14>
 8001944:	f7ff fae0 	bl	8000f08 <__sinit>
 8001948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800194c:	0719      	lsls	r1, r3, #28
 800194e:	d422      	bmi.n	8001996 <__swsetup_r+0x62>
 8001950:	06da      	lsls	r2, r3, #27
 8001952:	d407      	bmi.n	8001964 <__swsetup_r+0x30>
 8001954:	2209      	movs	r2, #9
 8001956:	602a      	str	r2, [r5, #0]
 8001958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001962:	e033      	b.n	80019cc <__swsetup_r+0x98>
 8001964:	0758      	lsls	r0, r3, #29
 8001966:	d512      	bpl.n	800198e <__swsetup_r+0x5a>
 8001968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800196a:	b141      	cbz	r1, 800197e <__swsetup_r+0x4a>
 800196c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001970:	4299      	cmp	r1, r3
 8001972:	d002      	beq.n	800197a <__swsetup_r+0x46>
 8001974:	4628      	mov	r0, r5
 8001976:	f7ff fbdf 	bl	8001138 <_free_r>
 800197a:	2300      	movs	r3, #0
 800197c:	6363      	str	r3, [r4, #52]	@ 0x34
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001984:	81a3      	strh	r3, [r4, #12]
 8001986:	2300      	movs	r3, #0
 8001988:	6063      	str	r3, [r4, #4]
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	6023      	str	r3, [r4, #0]
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	81a3      	strh	r3, [r4, #12]
 8001996:	6923      	ldr	r3, [r4, #16]
 8001998:	b94b      	cbnz	r3, 80019ae <__swsetup_r+0x7a>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a4:	d003      	beq.n	80019ae <__swsetup_r+0x7a>
 80019a6:	4621      	mov	r1, r4
 80019a8:	4628      	mov	r0, r5
 80019aa:	f000 f83f 	bl	8001a2c <__smakebuf_r>
 80019ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019b2:	f013 0201 	ands.w	r2, r3, #1
 80019b6:	d00a      	beq.n	80019ce <__swsetup_r+0x9a>
 80019b8:	2200      	movs	r2, #0
 80019ba:	60a2      	str	r2, [r4, #8]
 80019bc:	6962      	ldr	r2, [r4, #20]
 80019be:	4252      	negs	r2, r2
 80019c0:	61a2      	str	r2, [r4, #24]
 80019c2:	6922      	ldr	r2, [r4, #16]
 80019c4:	b942      	cbnz	r2, 80019d8 <__swsetup_r+0xa4>
 80019c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80019ca:	d1c5      	bne.n	8001958 <__swsetup_r+0x24>
 80019cc:	bd38      	pop	{r3, r4, r5, pc}
 80019ce:	0799      	lsls	r1, r3, #30
 80019d0:	bf58      	it	pl
 80019d2:	6962      	ldrpl	r2, [r4, #20]
 80019d4:	60a2      	str	r2, [r4, #8]
 80019d6:	e7f4      	b.n	80019c2 <__swsetup_r+0x8e>
 80019d8:	2000      	movs	r0, #0
 80019da:	e7f7      	b.n	80019cc <__swsetup_r+0x98>
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <__swhatbuf_r>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	460c      	mov	r4, r1
 80019e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e8:	2900      	cmp	r1, #0
 80019ea:	b096      	sub	sp, #88	@ 0x58
 80019ec:	4615      	mov	r5, r2
 80019ee:	461e      	mov	r6, r3
 80019f0:	da0d      	bge.n	8001a0e <__swhatbuf_r+0x2e>
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	bf14      	ite	ne
 80019fe:	2340      	movne	r3, #64	@ 0x40
 8001a00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a04:	2000      	movs	r0, #0
 8001a06:	6031      	str	r1, [r6, #0]
 8001a08:	602b      	str	r3, [r5, #0]
 8001a0a:	b016      	add	sp, #88	@ 0x58
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
 8001a0e:	466a      	mov	r2, sp
 8001a10:	f000 f848 	bl	8001aa4 <_fstat_r>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	dbec      	blt.n	80019f2 <__swhatbuf_r+0x12>
 8001a18:	9901      	ldr	r1, [sp, #4]
 8001a1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a22:	4259      	negs	r1, r3
 8001a24:	4159      	adcs	r1, r3
 8001a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a2a:	e7eb      	b.n	8001a04 <__swhatbuf_r+0x24>

08001a2c <__smakebuf_r>:
 8001a2c:	898b      	ldrh	r3, [r1, #12]
 8001a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a30:	079d      	lsls	r5, r3, #30
 8001a32:	4606      	mov	r6, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	d507      	bpl.n	8001a48 <__smakebuf_r+0x1c>
 8001a38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	6123      	str	r3, [r4, #16]
 8001a40:	2301      	movs	r3, #1
 8001a42:	6163      	str	r3, [r4, #20]
 8001a44:	b003      	add	sp, #12
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a48:	ab01      	add	r3, sp, #4
 8001a4a:	466a      	mov	r2, sp
 8001a4c:	f7ff ffc8 	bl	80019e0 <__swhatbuf_r>
 8001a50:	9f00      	ldr	r7, [sp, #0]
 8001a52:	4605      	mov	r5, r0
 8001a54:	4639      	mov	r1, r7
 8001a56:	4630      	mov	r0, r6
 8001a58:	f7ff f93e 	bl	8000cd8 <_malloc_r>
 8001a5c:	b948      	cbnz	r0, 8001a72 <__smakebuf_r+0x46>
 8001a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a62:	059a      	lsls	r2, r3, #22
 8001a64:	d4ee      	bmi.n	8001a44 <__smakebuf_r+0x18>
 8001a66:	f023 0303 	bic.w	r3, r3, #3
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	81a3      	strh	r3, [r4, #12]
 8001a70:	e7e2      	b.n	8001a38 <__smakebuf_r+0xc>
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	6020      	str	r0, [r4, #0]
 8001a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001a82:	b15b      	cbz	r3, 8001a9c <__smakebuf_r+0x70>
 8001a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f000 f81d 	bl	8001ac8 <_isatty_r>
 8001a8e:	b128      	cbz	r0, 8001a9c <__smakebuf_r+0x70>
 8001a90:	89a3      	ldrh	r3, [r4, #12]
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	81a3      	strh	r3, [r4, #12]
 8001a9c:	89a3      	ldrh	r3, [r4, #12]
 8001a9e:	431d      	orrs	r5, r3
 8001aa0:	81a5      	strh	r5, [r4, #12]
 8001aa2:	e7cf      	b.n	8001a44 <__smakebuf_r+0x18>

08001aa4 <_fstat_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4d07      	ldr	r5, [pc, #28]	@ (8001ac4 <_fstat_r+0x20>)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	f7fe ffcf 	bl	8000a54 <_fstat>
 8001ab6:	1c43      	adds	r3, r0, #1
 8001ab8:	d102      	bne.n	8001ac0 <_fstat_r+0x1c>
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	b103      	cbz	r3, 8001ac0 <_fstat_r+0x1c>
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	bd38      	pop	{r3, r4, r5, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000278 	.word	0x20000278

08001ac8 <_isatty_r>:
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4d06      	ldr	r5, [pc, #24]	@ (8001ae4 <_isatty_r+0x1c>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	602b      	str	r3, [r5, #0]
 8001ad4:	f7fe ffcd 	bl	8000a72 <_isatty>
 8001ad8:	1c43      	adds	r3, r0, #1
 8001ada:	d102      	bne.n	8001ae2 <_isatty_r+0x1a>
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	b103      	cbz	r3, 8001ae2 <_isatty_r+0x1a>
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
 8001ae4:	20000278 	.word	0x20000278

08001ae8 <_init>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	bf00      	nop
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr

08001af4 <_fini>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	bf00      	nop
 8001af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afa:	bc08      	pop	{r3}
 8001afc:	469e      	mov	lr, r3
 8001afe:	4770      	bx	lr
